<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:views="clr-namespace:ticktick_WPF.Views"
                    xmlns:converter="clr-namespace:ticktick_WPF.Converter"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:resource="clr-namespace:ticktick_WPF.Resource"
                    xmlns:wpf="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
                    xmlns:timeline="clr-namespace:ticktick_WPF.Views.Timeline"
                    xmlns:misc="clr-namespace:ticktick_WPF.Views.Misc"
                    xmlns:customControl="clr-namespace:ticktick_WPF.Views.CustomControl">
  <system:String x:Key="ManageTeamUrl">/#team/{0}</system:String>
  <system:String x:Key="RenewTeamUrl">
    /#team/{0}?action=renew
  </system:String>
  <Thickness x:Key="SplitLineThickness">0.5</Thickness>
  <system:Double x:Key="SplitLineWidth">0.5</system:Double>
  <Thickness x:Key="BoldSplitLineThickness">1</Thickness>
  <system:Double x:Key="BoldSplitLineWidth">1</system:Double>
  <system:Boolean x:Key="True">True</system:Boolean>
  <system:Boolean x:Key="False">False</system:Boolean>
  <system:Double x:Key="StickyFont14">14</system:Double>
  <system:Double x:Key="StickyFont13">13</system:Double>
  <system:Double x:Key="StickyFont12">12</system:Double>
  <system:Double x:Key="StickyFont11">11</system:Double>
  <system:Double x:Key="StickyFont10">10</system:Double>
  <system:Double x:Key="StickyHeight30">30</system:Double>
  <system:Double x:Key="StickyHeight42">42</system:Double>
  <Thickness x:Key="StickyTopTitleMargin">12,2,6,0</Thickness>
  <Thickness x:Key="StickyCheckItemIconMargin">3,8,0,0</Thickness>
  <converter:WindowStyleConverter x:Key="WindowStyleConverter"/>
  <converter:MaxWindowMarginConverter x:Key="MaxWindowMarginConverter"/>
  <converter:ComoBoxMinWidth x:Key="ComoBoxMinWidth"/>
  <converter:BoolCursorConverter x:Key="BoolCursorConverter"/>
  <converter:BoolVisibleConverter x:Key="BoolVisibleConverter"/>
  <converter:TextVisibleConverter x:Key="TextVisibleConverter"/>
  <converter:IntVisibleConverter x:Key="IntVisibleConverter"/>
  <converter:BoolInverseConverter x:Key="BoolInverseConverter"/>
  <converter:BoolOrBoolConverter x:Key="BoolOrBoolConverter"/>
  <converter:BoolConverseConverter x:Key="BoolConverseConverter"/>
  <converter:VisibleConverter x:Key="VisibleConverter"/>
  <converter:HiddenVisibleConverter x:Key="HiddenVisibleConverter"/>
  <converter:InverseVisibleConverter x:Key="InverseVisibleConverter"/>
  <converter:MathConverter x:Key="MathConverter"/>
  <converter:HighlightIconConverter x:Key="HighlightIconConverter"/>
  <converter:StringToVisibleConverter x:Key="StringToVisibleConverter"/>
  <converter:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter"/>
  <converter:StringEmptyBoolConverter x:Key="StringEmptyBoolConverter"/>
  <converter:BoolOrVisibilityConverter x:Key="BoolOrVisibilityConverter"/>
  <converter:BoolAndVisibilityConverter x:Key="BoolAndVisibilityConverter"/>
  <converter:PositiveVisibilityConverter x:Key="PositiveVisibilityConverter"/>
  <converter:PopupVeticalOffsetConverter x:Key="PopupVeticalOffsetConverter"/>
  <converter:BoolOpacityConverter x:Key="BoolOpacityConverter"/>
  <converter:KanbanBackgroundConverter x:Key="KanbanBackgroundConverter"/>
  <converter:MultipleBoolVisibleConverter x:Key="MultipleBoolVisibleConverter"/>
  <converter:TagCornerConverter x:Key="TagCornerConverter"/>
  <converter:HeightCornerConverter x:Key="HeightCornerConverter"/>
  <converter:ItemMaxHeightConverter x:Key="ItemMaxHeightConverter"/>
  <converter:HintVisibleConverter x:Key="HintVisibleConverter"/>
  <converter:AttachmentBackgroundConverter x:Key="AttachmentBackgroundConverter"/>
  <converter:TextSubstringConverter x:Key="TextSubstringConverter"/>
  <converter:TextEqualVisibleConverter x:Key="TextEqualVisibleConverter"/>
  <converter:CalendarTaskDateTextConverter x:Key="CalendarTaskDateTextConverter"/>
  <converter:CalendarTaskDateVisibilityConverter x:Key="CalendarTaskDateVisibilityConverter"/>
  <converter:CalendarTaskDateTextColorConverter x:Key="CalendarTaskDateTextColorConverter"/>
  <converter:CalendarTaskDateTextOpacityConverter x:Key="CalendarTaskDateTextOpacityConverter"/>
  <converter:CalendarTaskIconConverter x:Key="CalendarTaskIconConverter"/>
  <converter:TaskCellTopMarginConverter x:Key="TaskCellTopMarginConverter"/>
  <converter:TaskCellTitleHeightConverter x:Key="TaskCellTitleHeightConverter"/>
  <converter:TaskCellTitleWrapConverter x:Key="TaskCellTitleWrapConverter"/>
  <converter:TaskCellDateTextConverter x:Key="TaskCellDateTextConverter"/>
  <converter:TaskHeightConverter x:Key="TaskHeightConverter"/>
  <converter:TaskCellTextConverter x:Key="TaskCellTextConverter"/>
  <converter:ArrangeItemMarginConverter x:Key="ArrangeItemMarginConverter"/>
  <converter:CalendarDateVisibilityConverter x:Key="CalendarDateVisibilityConverter"/>
  <converter:TaskListTextPostponeConverter x:Key="TaskListTextPostponeConverter"/>
  <converter:SectionOptionVisibleConverter x:Key="SectionOptionVisibleConverter"/>
  <converter:GroupIndicatorAngleConverter x:Key="GroupIndicatorAngleConverter"/>
  <converter:SubItemBackgroundConverter x:Key="SubItemBackgroundConverter"/>
  <converter:TaskLevelMarginConverter x:Key="TaskLevelMarginConverter"/>
  <converter:SubTaskTitleWidthConverter x:Key="SubTaskTitleWidthConverter"/>
  <converter:ShowColorConverter x:Key="ShowColorConverter"/>
  <converter:TaskListDateColorConverter x:Key="TaskListDateColorConverter"/>
  <converter:TaskListDateConverter x:Key="TaskListDateConverter"/>
  <converter:TaskListAvatarVisibilityConverter x:Key="TaskListAvatarVisibilityConverter"/>
  <converter:DefaultRepeatDisplayTextConverter x:Key="DefaultRepeatDisplayTextConverter"/>
  <converter:StatusOpacityConverter x:Key="StatusOpacityConverter"/>
  <converter:AvatarNameConverter x:Key="AvatarNameConverter"/>
  <converter:ProgressTextColorConverter x:Key="ProgressTextColorConverter"/>
  <converter:ShowHabitIndicatorConverter x:Key="ShowHabitIndicatorConverter"/>
  <converter:ShowHabitTextConverter x:Key="ShowHabitTextConverter"/>
  <converter:ShowCreateTextConverter x:Key="ShowCreateTextConverter"/>
  <converter:CreateDateTextConverter x:Key="CreateDateTextConverter"/>
  <converter:HabitProgressTextConverter x:Key="HabitProgressTextConverter"/>
  <converter:HabitProgressConverter x:Key="HabitProgressConverter"/>
  <converter:HabitProgressToolTipConverter x:Key="HabitProgressToolTipConverter"/>
  <converter:ShowFoldTaskPathConverter x:Key="ShowFoldTaskPathConverter"/>
  <converter:SectionOpenConverter x:Key="SectionOpenConverter"/>
  <converter:KanbanItemShadowConverter x:Key="KanbanItemShadowConverter"/>
  <converter:KanbanItemMarginConverter x:Key="KanbanItemMarginConverter"/>
  <converter:KanbanItemCornerConverter x:Key="KanbanItemCornerConverter"/>
  <converter:KanbanContentConverter x:Key="KanbanContentConverter"/>
  <converter:KanbanLevelMarginConverter x:Key="KanbanLevelMarginConverter"/>
  <converter:PathImageConverter x:Key="PathImageConverter"/>
  <converter:HabitKeepTotalCountTextConverter x:Key="HabitKeepTotalCountTextConverter"/>
  <converter:HabitKeepTotalTextConverter x:Key="HabitKeepTotalTextConverter"/>
  <converter:DragBackgroundConverter x:Key="DragBackgroundConverter"/>
  <converter:ProjectBackgroundBlurMarginConverter x:Key="ProjectBackgroundBlurMarginConverter"/>
  <converter:EmojiTitleConverter x:Key="EmojiTitleConverter"/>
  <converter:ProjectTitleConverter x:Key="ProjectTitleConverter"/>
  <converter:ProjectMarginConverter x:Key="ProjectMarginConverter"/>
  <converter:TaskDisplayIconConverter x:Key="TaskDisplayIconConverter"/>
  <converter:LinkTextReadOnlyConverter x:Key="LinkTextReadOnlyConverter"/>
  <converter:TaskDetailPriorityIconConverter x:Key="TaskDetailPriorityIconConverter"/>
  <converter:TaskDetailPriorityTextConverter x:Key="TaskDetailPriorityTextConverter"/>
  <converter:SnoozeTextConverter x:Key="SnoozeTextConverter"/>
  <converter:CommentLineVisibleConverter x:Key="CommentLineVisibleConverter"/>
  <converter:TaskProgressVisibleConverter x:Key="TaskProgressVisibleConverter"/>
  <converter:RepeatVisibleConverter x:Key="RepeatVisibleConverter"/>
  <converter:TaskDetailDateConverter x:Key="TaskDetailDateConverter"/>
  <converter:TaskDetailTimeZoneDateConverter x:Key="TaskDetailTimeZoneDateConverter"/>
  <converter:TaskDetailDateColorConverter x:Key="TaskDetailDateColorConverter"/>
  <converter:TaskModeConverter x:Key="TaskModeConverter"/>
  <converter:TaskDetailDateMaxWidthConverter x:Key="TaskDetailDateMaxWidthConverter"/>
  <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
  <converter:NullToNotVisibleConverter x:Key="NullToNotVisibleConverter"/>
  <converter:MultiVisibilityConverter x:Key="MultiVisibilityConverter"/>
  <converter:SelectedIconColorConverter x:Key="SelectedIconColorConverter"/>
  <timeline:TimelineCellInlineTextVisibility x:Key="TimelineCellInlineTextVisibility"/>
  <timeline:TimelineInlineFrontWidthConverter x:Key="TimelineInlineFrontWidthConverter"/>
  <timeline:TimelineFloatingAvatarVisibleConverter x:Key="TimelineFloatingAvatarVisibleConverter"/>
  <timeline:TimelineArrangeTimeToText x:Key="TimelineArrangeTimeToText"/>
  <timeline:TimelineMaxHeight x:Key="TimelineMaxHeight"/>
  <timeline:TimelineCellOutlineTextMaxWidthConverter x:Key="TimelineCellOutlineTextMaxWidthConverter"/>
  <timeline:TimelineOutlineAvatarVisibleConverter x:Key="TimelineOutlineAvatarVisibleConverter"/>
  <timeline:TimelineTextTrimmingConverter x:Key="TimelineTextTrimmingConverter"/>
  <timeline:TimelineOperationContainsEditConverter x:Key="TimelineOperationContainsEditConverter"/>
  <converter:SelectableItemCheckIconConverter x:Key="SelectableItemCheckIconConverter"/>
  <converter:ProjectFoldIconVisibleConverter x:Key="ProjectFoldIconVisibleConverter"/>
  <converter:SelectionVisibleConverter x:Key="SelectionVisibleConverter"/>
  <converter:SelectionBackgroundConverter x:Key="SelectionBackgroundConverter"/>
  <converter:SelectionWidthConverter x:Key="SelectionWidthConverter"/>
  <converter:SelectionHorizonConverter x:Key="SelectionHorizonConverter"/>
  <converter:DayTextConverter x:Key="DayTextConverter"/>
  <converter:WidgetTaskDateColorConverter x:Key="WidgetTaskDateColorConverter"/>
  <converter:WidgetTaskTitleConverter x:Key="WidgetTaskTitleConverter"/>
  <converter:WidgetTaskTitleColorConverter x:Key="WidgetTaskTitleColorConverter"/>
  <converter:TaskNoTitleDecorationsConverter x:Key="TaskNoTitleDecorationsConverter"/>
  <converter:TitleDecorationsConverter x:Key="TitleDecorationsConverter"/>
  <converter:GetDiffConverter x:Key="GetDiffConverter"/>
  <converter:OpacityToolTipConverter x:Key="OpacityToolTipConverter"/>
  <Style x:Key="FontBase" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="TextBlock.TextAlignment" Value="Left"/>
  </Style>
  <Style x:Key="TitleBase" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FontBase}">
    <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>
  </Style>
  <Style x:Key="Title01" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TitleBase}">
    <Setter Property="TextBlock.FontSize" Value="24"/>
  </Style>
  <Style x:Key="Title03" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TitleBase}">
    <Setter Property="TextBlock.FontSize" Value="20"/>
    <Setter Property="TextBlock.FontWeight" Value="Regular"/>
  </Style>
  <Style x:Key="Title04" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TitleBase}">
    <Setter Property="TextBlock.FontSize" Value="16"/>
  </Style>
  <Style x:Key="Title05" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TitleBase}">
    <Setter Property="TextBlock.FontSize" Value="16"/>
    <Setter Property="TextBlock.FontWeight" Value="Regular"/>
  </Style>
  <Style x:Key="BodyBase" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FontBase}">
    <Setter Property="TextBlock.FontWeight" Value="Regular"/>
  </Style>
  <Style x:Key="Body01" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="14"/>
  </Style>
  <Style x:Key="Body02" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="14"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
  </Style>
  <Style x:Key="Body03" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
  </Style>
  <Style x:Key="Body04" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
    <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>
  </Style>
  <Style x:Key="Body05" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
  </Style>
  <Style x:Key="Body06" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity60}"/>
  </Style>
  <Style x:Key="Body07" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
  </Style>
  <Style x:Key="Body08" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
  </Style>
  <Style x:Key="Body09" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="12"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
  </Style>
  <Style x:Key="Body10" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="12"/>
  </Style>
  <Style x:Key="Body11" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="12"/>
    <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>
  </Style>
  <Style x:Key="Body12" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BodyBase}">
    <Setter Property="TextBlock.FontSize" Value="12"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity60}"/>
  </Style>
  <Style x:Key="TagBase" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FontBase}">
    <Setter Property="TextBlock.FontWeight" Value="Regular"/>
    <Setter Property="TextBlock.FontSize" Value="12"/>
  </Style>
  <Style x:Key="Tag01" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}"/>
  <Style x:Key="Tag02" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseSolidColorOpacity60}"/>
  </Style>
  <Style x:Key="Tag03" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
  </Style>
  <Style x:Key="Tag04" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseSolidColorOpacity20}"/>
  </Style>
  <Style x:Key="Tag05" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseSolidColorOpacity40}"/>
    <Setter Property="TextBlock.FontSize" Value="11"/>
  </Style>
  <Style x:Key="Tag06" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity60}"/>
    <Setter Property="TextBlock.FontSize" Value="10"/>
  </Style>
  <Style x:Key="Font14_40" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="TextBlock.FontSize" Value="14"/>
  </Style>
  <Style x:Key="Font12_40" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="TextBlock.FontSize" Value="14"/>
  </Style>
  <Style x:Key="Font16_100" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="TextBlock.FontSize" Value="16"/>
  </Style>
  <Style x:Key="Font28_100" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TagBase}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="TextBlock.FontSize" Value="28"/>
  </Style>
  <Style x:Key="IconBase" TargetType="{x:Type Image}">
    <Setter Property="UIElement.Opacity" Value="0.6"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Image.Stretch" Value="Uniform"/>
  </Style>
  <Style x:Key="Icon01" TargetType="{x:Type Image}" BasedOn="{StaticResource IconBase}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
  </Style>
  <Style x:Key="Icon02" TargetType="{x:Type Image}">
    <Setter Property="FrameworkElement.Width" Value="12"/>
    <Setter Property="FrameworkElement.Height" Value="12"/>
    <Setter Property="UIElement.Opacity" Value="0.2"/>
  </Style>
  <Style x:Key="ListIcon" TargetType="{x:Type Image}" BasedOn="{StaticResource Icon02}">
    <Setter Property="FrameworkElement.Margin" Value="2,0"/>
  </Style>
  <Style x:Key="Path01" TargetType="{x:Type Path}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Shape.Stretch" Value="Uniform"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
  </Style>
  <Style x:Key="DropGrid" TargetType="{x:Type Grid}">
    <Setter Property="Panel.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Panel.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DropUnit" TargetType="{x:Type StackPanel}">
    <Setter Property="Panel.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="StackPanel.Orientation" Value="Horizontal"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Panel.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DropUnitIcon" TargetType="{x:Type Image}" BasedOn="{StaticResource Icon01}">
    <Setter Property="FrameworkElement.Margin" Value="16,0,0,0"/>
  </Style>
  <Style x:Key="EditorIcon" TargetType="{x:Type Image}" BasedOn="{StaticResource Icon01}"/>
  <Style x:Key="DropUnitTitle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Body07}">
    <Setter Property="FrameworkElement.Margin" Value="8,0,12,0"/>
    <Setter Property="TextBlock.FontSize" Value="{DynamicResource Font12}"/>
  </Style>
  <Style x:Key="ShortCutStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Tag01}">
    <Setter Property="FrameworkElement.Margin" Value="0,0,8,0"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity60}"/>
  </Style>
  <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="ContextMenu.HasDropShadow" Value="true"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="250"/>
    <Setter Property="FrameworkElement.Margin" Value="0,10"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border x:Name="Border" Background="{TemplateBinding Control.Background}" BorderThickness="10">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="10" Opacity="0.2" ShadowDepth="0"/>
            </UIElement.Effect>
            <ScrollViewer Style="{DynamicResource for_scrollviewer}" Margin="0,8">
              <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="MenuItemItemControlTemplate" TargetType="{x:Type MenuItem}">
    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0"
            Background="{DynamicResource PopupBackground}" SnapsToDevicePixels="true">
      <Grid x:Name="Grid">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
          <ColumnDefinition Width="0"/>
          <ColumnDefinition Width="*" MaxWidth="250"/>
          <ColumnDefinition Width="30"/>
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" MaxWidth="250"/>
          <ColumnDefinition Width="20"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon" Content="{TemplateBinding MenuItem.Icon}" ContentSource="Icon"
                          HorizontalAlignment="Center" Height="16" Margin="16,0"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                          Width="16"/>
        <Border x:Name="GlyphPanel" BorderBrush="{DynamicResource BaseColorOpacity10_20}" BorderThickness="0"
                Background="{DynamicResource PopupBackground}" ClipToBounds="false" HorizontalAlignment="Center"
                Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
          <Path x:Name="Glyph" Data="F1 M 10,1.2 L 4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2 Z"
                Fill="Black" FlowDirection="LeftToRight" Height="11" Width="10"/>
        </Border>
        <ContentPresenter x:Name="menuHeaderContainer"
                          ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                          Content="{TemplateBinding HeaderedItemsControl.Header}" Grid.Column="2"
                          ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                          ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Control.Padding}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="Center"/>
        <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Control.Padding}"
                   Foreground="{DynamicResource BaseColorOpacity100_80}"
                   Text="{TemplateBinding MenuItem.InputGestureText}" VerticalAlignment="Center"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Value="{x:Null}" Property="MenuItem.Icon">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="true">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="true">
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.Background"/>
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="Transparent"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="MenuItem.IsHighlighted" Value="true"/>
          <Condition Property="UIElement.IsEnabled" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.Background"/>
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.BorderBrush"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="AppMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Control.Template" Value="{DynamicResource GroupMenuItemTemplate}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.56"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="GroupMenuItemTemplate" TargetType="{x:Type MenuItem}">
    <Border x:Name="templateRoot" Cursor="Hand" Background="Transparent" SnapsToDevicePixels="true">
      <Grid x:Name="Grid" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="5"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" SnapsToDevicePixels="true"
                          VerticalAlignment="Center"/>
        <ContentPresenter x:Name="ContentPresenter" ContentSource="Header" HorizontalAlignment="Left"
                          VerticalAlignment="Center" Grid.Column="1" SnapsToDevicePixels="true"/>
        <Path x:Name="RightArrow" Grid.Column="1" Data="M 0,0 L 4,3.5 0,7 Z" Visibility="Collapsed"
              Fill="{StaticResource BaseColorOpacity40}" HorizontalAlignment="Right" Margin="0,0,5,0"
              VerticalAlignment="Center"/>
        <Popup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="true" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Right" VerticalOffset="-10"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Border x:Name="SubMenuBorder" BorderThickness="1" BorderBrush="#14191919" Background="#FCFCFC">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="6" Opacity="0.2" ShadowDepth="0"/>
            </UIElement.Effect>
            <ScrollViewer x:Name="SubMenuScrollViewer" Margin="0,5"
                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <Grid x:Name="Grid1" RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}"
                             Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                             Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                </Canvas>
                <Rectangle x:Name="Rectangle" Fill="Transparent" HorizontalAlignment="Left" Width="1"/>
                <ItemsPresenter x:Name="ItemsPresenter" MaxWidth="250" KeyboardNavigation.DirectionalNavigation="Cycle"
                                Grid.IsSharedSizeScope="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Cycle"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="Fade"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="templateRoot" Value="{StaticResource BaseColorOpacity5}" Property="Border.Background"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuItemGroupControlTemplate" TargetType="{x:Type MenuItem}">
    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{DynamicResource PopupBackground}" SnapsToDevicePixels="true">
      <Grid x:Name="Grid" Margin="-1" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
          <ColumnDefinition Width="0"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="30"/>
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
          <ColumnDefinition Width="25"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon" Content="{TemplateBinding MenuItem.Icon}" ContentSource="Icon"
                          HorizontalAlignment="Center" Height="16" Margin="16,0"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                          Width="16"/>
        <Border x:Name="GlyphPanel" Grid.Column="0" BorderBrush="Transparent" BorderThickness="1"
                Background="Transparent" Height="22" Margin="-1,0,0,0" Visibility="Hidden"
                VerticalAlignment="Center" Width="22">
          <Path x:Name="Glyph" Data="F1 M 10,1.2 L 4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2 Z"
                Fill="{DynamicResource BaseColorOpacity40}" FlowDirection="LeftToRight" Height="11" Width="9"/>
        </Border>
        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                          Content="{TemplateBinding HeaderedItemsControl.Header}" Grid.Column="2"
                          ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                          ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Control.Padding}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="Center"/>
        <TextBlock x:Name="TextBlock" Grid.Column="4" Margin="{TemplateBinding Control.Padding}" Opacity="0.7"
                   Text="{TemplateBinding MenuItem.InputGestureText}" VerticalAlignment="Center"/>
        <Path x:Name="RightArrow" Grid.Column="5" Data="M 0,0 L 4,3.5 0,7 Z"
              Fill="{DynamicResource BaseColorOpacity40}" HorizontalAlignment="Left" Margin="10,0,5,0"
              VerticalAlignment="Center"/>
        <Popup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="true" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative" VerticalOffset="-10"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
               HorizontalOffset="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MathConverter}, ConverterParameter=@VALUE-10}">
          <Border x:Name="SubMenuBorder" BorderThickness="1" Background="Transparent">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="6" Opacity="0.2" ShadowDepth="0"/>
            </UIElement.Effect>
            <ScrollViewer x:Name="SubMenuScrollViewer" Margin="10"
                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <Grid x:Name="Grid1" RenderOptions.ClearTypeHint="Enabled" Background="{DynamicResource PopupBackground}">
                <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}"
                             Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                             Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                </Canvas>
                <Rectangle x:Name="Rectangle" Fill="Transparent" HorizontalAlignment="Left" Width="1"/>
                <ItemsPresenter x:Name="ItemsPresenter" MaxWidth="250" KeyboardNavigation.DirectionalNavigation="Cycle"
                                Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                KeyboardNavigation.TabNavigation="Cycle"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Value="{x:Null}" Property="MenuItem.Icon">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="true">
        <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="true">
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.Background"/>
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity5}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="templateRoot" Value="{DynamicResource BaseColorOpacity100_80}"
                Property="TextElement.Foreground"/>
      </Trigger>
      <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"
                Property="Canvas.Top"/>
        <Setter TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"
                Property="Canvas.Left"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="for_normal_window" TargetType="{x:Type Window}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding FrameworkElement.Margin}" CornerRadius="5"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="for_max_window" TargetType="{x:Type Window}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid Margin="{Binding Converter={StaticResource MaxWindowMarginConverter}}">
            <ContentPresenter/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="normalButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="PART_Background" BorderThickness="0" Background="Transparent">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Background" Value="{DynamicResource BaseColorOpacity5}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Background" Value="{DynamicResource BaseColorOpacity5}"
                      Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="closeButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="FrameworkElement.Tag" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="PART_Background" BorderThickness="0" Background="Transparent"
                  CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Background" Property="Border.Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ColorPrimary}"/>
                </Setter.Value>
              </Setter>
              <Setter Property="Control.Foreground">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="White" Offset="0.0"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Background" Property="Border.Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ColorPrimary}" Opacity="0.75"/>
                </Setter.Value>
              </Setter>
              <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HoverButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="Transparent"/>
    <Setter Property="FrameworkElement.Tag" Value="4"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="false">
        <Setter Property="Control.Background" Value="Transparent"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HoverButtonItemStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" Margin="4,0" BorderThickness="0"
                  BorderBrush="Transparent" CornerRadius="4">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryColor5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListHoverItemStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <Border Background="{TemplateBinding Control.Background}" Margin="4,0" BorderThickness="0"
                  BorderBrush="Transparent" CornerRadius="4">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding HoverSelected}" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity3}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListHoverSelectedItemStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <Border Background="{TemplateBinding Control.Background}" Margin="4,0" BorderThickness="0"
                  BorderBrush="Transparent" CornerRadius="4">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding HoverSelected}" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CaneldarBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity10}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="WidgetCalendarButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity5}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{DynamicResource BaseColorOpacity5}"
                  BorderThickness="0">
            <Grid>
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
              <Border Name="cover" CornerRadius="2" Background="{DynamicResource BaseColorOpacity5}"
                      Visibility="Collapsed"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SetDateButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.Padding" Value="4,0,0,0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Height="{TemplateBinding FrameworkElement.Height}">
            <Border Background="{TemplateBinding Control.Background}" CornerRadius="4" BorderThickness="0"/>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="4" BorderThickness="1"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Control.Padding}"/>
            <Border Name="cover" CornerRadius="2" Background="{DynamicResource BaseColorOpacity5}"
                    Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="30"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity80}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
    <Setter Property="FrameworkElement.Tag" Value="6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    Height="{TemplateBinding FrameworkElement.Height}" BorderThickness="0"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,8,0"/>
            <Border Name="cover" Background="{DynamicResource BaseColorOpacity10}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.45"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HoverSaveButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="30"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryColor}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Tag" Value="6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    Height="{TemplateBinding FrameworkElement.Height}" BorderThickness="0"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,8,0"/>
            <Border Name="cover1" Background="{TemplateBinding Control.Background}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <Border Name="cover2" Background="{TemplateBinding Control.Background}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover1" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="cover2" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.45"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SecondaryButtonStyle" TargetType="{x:Type Button}"/>
  <Style x:Key="PrimaryButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryColor}"/>
    <Setter Property="FrameworkElement.Height" Value="30"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="#D8FFFFFF"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Tag" Value="4"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    Height="{TemplateBinding FrameworkElement.Height}" BorderThickness="0"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <Border BorderBrush="{DynamicResource BaseColorOpacity20}" BorderThickness="1"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0"/>
            <Border Name="cover" Background="{DynamicResource BaseColorOpacity5}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.54"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SaveButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryColor}"/>
    <Setter Property="FrameworkElement.Height" Value="30"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="#E8FFFFFF"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Tag" Value="6"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,8,0"/>
            <Border Name="cover" Background="{DynamicResource BaseColorOpacity5}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.2"/>
        <Setter Property="Control.Foreground" Value="#99FFFFFF"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FocusOptionButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="16"/>
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryColor}"/>
    <Setter Property="FrameworkElement.Height" Value="48"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="#D8FFFFFF"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{TemplateBinding Height, Converter={StaticResource HeightCornerConverter}}"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="12,0"/>
            <Border Name="cover" Background="{DynamicResource BaseColorOpacity5}" Visibility="Collapsed"
                    CornerRadius="{TemplateBinding Height, Converter={StaticResource HeightCornerConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SetButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="28"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{DynamicResource BaseColorOpacity20}">
            <Grid>
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0"/>
              <Border Name="cover" Background="{DynamicResource BaseColorOpacity5}" Visibility="Collapsed"
                      CornerRadius="2"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="cover" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CancelButtonStyle2" TargetType="{x:Type Button}"
         BasedOn="{StaticResource CancelButtonStyle}">
    <Setter Property="FrameworkElement.Height" Value="28"/>
    <Setter Property="FrameworkElement.Width" Value="86"/>
  </Style>
  <Style x:Key="SaveButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource SaveButtonStyle}">
    <Setter Property="FrameworkElement.Height" Value="28"/>
    <Setter Property="FrameworkElement.Width" Value="80"/>
  </Style>
  <Style x:Key="NormalButton" TargetType="{x:Type Button}">
    <Setter Property="Control.FontSize" Value="14"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BaseColorOpacity10_20}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="4">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5, 0"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SettingsButton" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.MinWidth" Value="88"/>
    <Setter Property="FrameworkElement.MinHeight" Value="28"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{DynamicResource PopupBackground}" BorderBrush="{DynamicResource BaseColorOpacity5}"
                  MinWidth="{TemplateBinding FrameworkElement.MinWidth}"
                  MinHeight="{TemplateBinding FrameworkElement.MinHeight}" BorderThickness="1"
                  HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="4">
            <TextBlock MaxWidth="160" Foreground="{DynamicResource BaseColorOpacity100_80}"
                       TextTrimming="CharacterEllipsis" HorizontalAlignment="Center" FontSize="13"
                       VerticalAlignment="Center" FontFamily="{TemplateBinding Control.FontFamily}"
                       Text="{TemplateBinding ContentControl.Content}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NoneButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{DynamicResource PopupBackground}" BorderBrush="White"
                  MinWidth="{TemplateBinding FrameworkElement.MinWidth}"
                  MinHeight="{TemplateBinding FrameworkElement.MinHeight}" HorizontalAlignment="Center"
                  VerticalAlignment="Center">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TokenButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0"
                  MinWidth="{TemplateBinding FrameworkElement.MinWidth}"
                  MinHeight="{TemplateBinding FrameworkElement.MinHeight}" CornerRadius="4"
                  HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}"
                  VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransparentButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  MinWidth="{TemplateBinding FrameworkElement.MinWidth}"
                  MinHeight="{TemplateBinding FrameworkElement.MinHeight}" CornerRadius="4"
                  HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}"
                  VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Padding" Value="4,1"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd" BorderThickness="0" Background="{TemplateBinding Control.Background}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="White"/>
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="White"/>
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryColor}" Property="TextElement.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush"/>
              <Setter TargetName="Bd" Property="TextElement.Foreground" Value="White"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="White"/>
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="White"/>
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryColor}" Property="TextElement.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush"/>
              <Setter TargetName="Bd" Property="TextElement.Foreground" Value="White"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
  <Style x:Key="SimpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryColor}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid x:Name="templateRoot" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                  Margin="0,0,8,0">
              <Border Name="CheckedBackground" Background="White" Margin="3" Opacity="0"/>
              <Path x:Name="checkBoxBorderNone" Fill="{TemplateBinding Control.BorderBrush}" Stretch="Uniform"
                    Margin="0,0,1,0" Height="14" Opacity="0.85"
                    Data="{Binding Source={StaticResource UncheckBox}, Path=Data}"/>
              <Path x:Name="checkBoxBorderCheck" Fill="{TemplateBinding Control.Background}" Stretch="Uniform"
                    Height="14" Margin="0,0,1,0" Opacity="0"
                    Data="{Binding Source={StaticResource CheckedBox}, Path=Data}"/>
              <Path x:Name="partCheckBoxBorderCheck" Fill="{TemplateBinding Control.Background}" Stretch="Uniform"
                    Height="14" Margin="0,0,1,0" Opacity="0"
                    Data="{Binding Source={StaticResource PartCheckedBox}, Path=Data}"/>
            </Grid>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true"/>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <Trigger Property="ButtonBase.IsPressed" Value="true"/>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="CheckedBackground" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="partCheckBoxBorderCheck" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="CheckedBackground" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BlueSwitchCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.WindowBrushKey}}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="OnChecking">
              <DoubleAnimation Duration="00:00:0.1" Storyboard.TargetName="slider" From="0" To="12"
                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"/>
            </Storyboard>
            <Storyboard x:Key="OnUnchecking">
              <DoubleAnimation Duration="00:00:0.1" Storyboard.TargetName="slider" From="12" To="0"
                               Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"/>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <DockPanel x:Name="dockPanel">
            <Grid>
              <Border x:Name="BackgroundBorder" CornerRadius="10" Height="20" Width="32">
                <Border.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#FFC7C7C7" Offset="0"/>
                  </LinearGradientBrush>
                </Border.Background>
              </Border>
              <Border x:Name="slider" BorderBrush="#FF939393" HorizontalAlignment="Left" VerticalAlignment="Center"
                      Height="20" BorderThickness="0">
                <UIElement.RenderTransform>
                  <TranslateTransform X="0" Y="0"/>
                </UIElement.RenderTransform>
                <Ellipse Width="20" Height="20" Stroke="Transparent" Fill="White" StrokeThickness="2"
                         HorizontalAlignment="Center" VerticalAlignment="Center"/>
              </Border>
            </Grid>
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Content="{TemplateBinding ContentControl.Content}" Margin="{TemplateBinding Control.Padding}"
                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" RecognizesAccessKey="true"
                              VerticalAlignment="Center"/>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}"/>
              </TriggerBase.EnterActions>
              <Setter TargetName="BackgroundBorder" Value="{DynamicResource PrimaryColor}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid>
            <Rectangle Name="rect" Fill="{DynamicResource ScrollBarColor}" Opacity="0.65" RadiusX="3" RadiusY="3"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="rect" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Control.Background}" Width="{TemplateBinding FrameworkElement.Width}"
                     Height="{TemplateBinding FrameworkElement.Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Control.Background}" Width="{TemplateBinding FrameworkElement.Width}"
                     Height="{TemplateBinding FrameworkElement.Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="for_scrollbar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Margin" Value="1"/>
    <Setter Property="FrameworkElement.Width" Value="6"/>
    <Setter Property="FrameworkElement.MinWidth" Value="6"/>
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="Bg">
            <Track x:Name="PART_Track" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" IsDirectionReversed="true">
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumb}"/>
              </Track.Thumb>
            </Track>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Margin" Value="1,0,6,1"/>
        <Setter Property="FrameworkElement.Height" Value="10"/>
        <Setter Property="FrameworkElement.MinHeight" Value="10"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="UIElement.Opacity" Value="0.8"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid x:Name="Bg">
                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                  Command="{x:Static ScrollBar.PageLeftCommand}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                  Command="{x:Static ScrollBar.PageRightCommand}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"/>
                  </Track.Thumb>
                </Track>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="for_scrollviewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <ScrollContentPresenter Cursor="{TemplateBinding FrameworkElement.Cursor}" Margin="{TemplateBinding Control.Padding}"
                                    VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="true"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                    CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" HorizontalAlignment="Right"
                       VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="true"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Orientation="Vertical"
                       Style="{StaticResource for_scrollbar}" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Value="{TemplateBinding ScrollViewer.VerticalOffset}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       Orientation="Horizontal" VirtualizingPanel.VirtualizationMode="Recycling"
                       VirtualizingPanel.IsVirtualizing="true" Style="{StaticResource for_scrollbar}"
                       VerticalAlignment="Bottom" Value="{TemplateBinding ScrollViewer.HorizontalOffset}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="ScrollChanged">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1"
                                   Duration="0:0:0.5"/>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0"
                                   Duration="0:0:0.5" BeginTime="0:0:1"/>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1"
                                   Duration="0:0:0.5"/>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0"
                                   Duration="0:0:0.5" BeginTime="0:0:1"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_VerticalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1"
                                   Duration="0:0:0.5"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_VerticalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0"
                                   BeginTime="0:0:1" Duration="0:0:0.5"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_HorizontalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1"
                                   Duration="0:0:0.5"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_HorizontalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0"
                                   BeginTime="0:0:1" Duration="0:0:0.5"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarStyle1" TargetType="{x:Type Calendar}">
    <Setter Property="Control.Foreground" Value="#FF333333"/>
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          Background="{TemplateBinding Control.Background}"
                          Style="{TemplateBinding Calendar.CalendarItemStyle}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Calendar.CalendarItemStyle" Value="{DynamicResource CalendarItemStyle1}"/>
    <Setter Property="Calendar.CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle1}"/>
  </Style>
  <Style x:Key="CalendarItemStyle1" TargetType="{x:Type CalendarItem}">
    <Setter Property="FrameworkElement.Margin" Value="0,3,0,3"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <FrameworkTemplate.Resources>
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <TextBlock Foreground="{DynamicResource BaseColorOpacity60}" FontSize="12" HorizontalAlignment="Center"
                         Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}"/>
            </DataTemplate>
          </FrameworkTemplate.Resources>
          <Grid x:Name="PART_Root">
            <FrameworkElement.Resources>
              <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
            </FrameworkElement.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="1">
              <Border BorderBrush="#FFFFFFFF" BorderThickness="2" CornerRadius="1">
                <Grid>
                  <FrameworkElement.Resources>
                    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <ColorAnimation Duration="0" To="#FF757575" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="path"/>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                                                 Storyboard.TargetName="path"/>
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                        <Grid>
                          <Path x:Name="path" Data="M 288.75,232.25 L 288.75,240.625 283,236.625 Z" Fill="#A3A3A3"
                                HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center"
                                Width="6"/>
                        </Grid>
                      </Grid>
                    </ControlTemplate>
                    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <ColorAnimation Duration="0" To="#FF757575" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="path"/>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                                                 Storyboard.TargetName="path"/>
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                        <Grid>
                          <Path x:Name="path" Data="M 282.875,231.875 L 282.875,240.375 288.625,236 Z" Fill="#A3A3A3"
                                HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill"
                                VerticalAlignment="Center" Width="6"/>
                        </Grid>
                      </Grid>
                    </ControlTemplate>
                    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <ColorAnimation Duration="0" To="#FF757575"
                                                Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="buttonContent"/>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          Content="{TemplateBinding ContentControl.Content}" TextElement.FontSize="12"
                                          TextElement.FontWeight="Normal" TextElement.Foreground="{DynamicResource BaseColorOpacity60}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1,4,1,9"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                      </Grid>
                    </ControlTemplate>
                  </FrameworkElement.Resources>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                  </Grid.RowDefinitions>
                  <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="false" HorizontalAlignment="Left"
                          Height="20" Grid.Row="0" Template="{DynamicResource PreviousButtonTemplate}" Width="28"/>
                  <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="false" FontSize="10.5"
                          HorizontalAlignment="Center" Grid.Row="0" Template="{DynamicResource HeaderButtonTemplate}"
                          VerticalAlignment="Center"/>
                  <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="false" HorizontalAlignment="Right" Height="20"
                          Grid.Row="0" Template="{DynamicResource NextButtonTemplate}" Width="28"/>
                  <Grid x:Name="PART_MonthView" ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Row="1"
                        Visibility="Visible">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                  </Grid>
                  <Grid x:Name="PART_YearView" ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Row="1"
                        Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                  </Grid>
                </Grid>
              </Border>
            </Border>
            <Rectangle x:Name="PART_DisabledVisual" Fill="{DynamicResource DisabledColor}" Opacity="0" RadiusY="2"
                       RadiusX="2" Stretch="Fill" Stroke="{DynamicResource DisabledColor}" StrokeThickness="1"
                       Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_DisabledVisual" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <DataTrigger Value="Year"
                         Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}">
              <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Value="Decade"
                         Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}">
              <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarDayButtonStyle1" TargetType="{x:Type CalendarDayButton}">
    <Setter Property="FrameworkElement.MinWidth" Value="5"/>
    <Setter Property="FrameworkElement.MinHeight" Value="5"/>
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.1"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal">
                  <Storyboard/>
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HoverBackground"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="White"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                    <ColorAnimation Duration="0" To="#FF989898"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="RegularDay"/>
                <VisualState x:Name="Today">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="{DynamicResource primary_blue_100}"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.FontWeight)" Storyboard.TargetName="NormalText">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <ObjectKeyFrame.Value>
                          <FontWeight>Bold</FontWeight>
                        </ObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unselected"/>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground"/>
                    <ColorAnimation Duration="0" To="White"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="#FF262626"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="#FF989898"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BlackoutDayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NormalDay"/>
                <VisualState x:Name="BlackoutDay">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Blackout"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="HoverBackground" Fill="{DynamicResource BaseColorOpacity5}" Opacity="0" RadiusY="26"
                       RadiusX="26" Width="26" Height="26"/>
            <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource PrimaryColor}" Opacity="0" RadiusY="26"
                       RadiusX="26" Width="26" Height="26"/>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"/>
            <ContentPresenter x:Name="NormalText" TextElement.Foreground="#FF262626" TextBlock.FontSize="12"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="5,1,5,1"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            <Path x:Name="Blackout"
                  Data="M 8.1772461,11.029181 L 10.433105,11.029181 11.700684,12.801641 12.973633,11.029181 15.191895,11.029181 12.844727,13.999395 15.21875,17.060919 12.962891,17.060919 11.673828,15.256231 10.352539,17.060919 8.1396484,17.060919 10.519043,14.042364 Z"
                  Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0"
                  RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
            <Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="false" RadiusY="1" RadiusX="1" Stroke="#FF45D6FA"
                       Visibility="Collapsed"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="ButtonBase.ClickMode" Value="Press"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="templateRoot" Background="Transparent"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{DynamicResource BaseColorOpacity10_20}">
            <Border x:Name="splitBorder"
                    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Margin="0,0,8,0"
                    HorizontalAlignment="Right" BorderBrush="Transparent">
              <Path x:Name="arrow" Width="12" Height="12" Fill="{DynamicResource BaseColorOpacity40}" Stretch="Fill"
                    Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <ContentPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
  </Style>
  <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="ListBox.SelectionMode" Value="Extended"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="None"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="true"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListViewItemContainerStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0"
                  Background="{TemplateBinding Control.Background}">
            <customControl:SmoothScrollViewer x:Name="ScrollViewer" Style="{StaticResource for_scrollviewer}"
                                              Padding="{TemplateBinding Control.Padding}">
              <ItemsPresenter x:Name="ItemsPresenter"/>
            </customControl:SmoothScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsVirtualizing="true" ScrollUnit="Pixel" VirtualizationMode="Recycling"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="ListBox.SelectionMode" Value="Extended"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="true"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
    <Setter Property="ScrollViewer.PanningMode" Value="None"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListViewItemContainerStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0"
                  Background="{TemplateBinding Control.Background}">
            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource for_scrollviewer}"
                          VirtualizingPanel.IsVirtualizing="true" HorizontalScrollBarVisibility="Visible"
                          VerticalScrollBarVisibility="Disabled" Padding="{TemplateBinding Control.Padding}">
              <ItemsPresenter x:Name="ItemsPresenter"/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ReadOnlyText" TargetType="{x:Type TextBox}">
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="TextBoxBase.IsReadOnly" Value="true"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="TextBox.TextWrapping" Value="Wrap"/>
  </Style>
  <Style x:Key="TagPopupItemTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Control.Background" Value="{DynamicResource PopupBackground}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.Height" Value="35"/>
    <Setter Property="FrameworkElement.Cursor" Value="Arrow"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="TextBoxBase.IsReadOnly" Value="true"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="190"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0"
                  Background="{TemplateBinding Control.Background}">
            <TextBlock Text="{TemplateBinding TextBox.Text}" Margin="15,0" VerticalAlignment="Center"
                       Foreground="{TemplateBinding Control.Foreground}" TextTrimming="CharacterEllipsis"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush"
                Value="{DynamicResource {x:Static JetSystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PopupBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="6"/>
    <Setter Property="FrameworkElement.Margin" Value="5,5,10,10"/>
    <Setter Property="Border.Background" Value="{DynamicResource PopupBackground}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="12" Opacity="0.15" ShadowDepth="2" Direction="300"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WindowBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="8"/>
    <Setter Property="FrameworkElement.Margin" Value="10"/>
    <Setter Property="Border.Background" Value="{DynamicResource PopupBackground}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="18" Opacity="0.2" ShadowDepth="3" Direction="300"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource DarkBorderColor}"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Margin" Value="5,5,10,10"/>
    <Setter Property="Border.CornerRadius" Value="6"/>
  </Style>
  <Style x:Key="WindowInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource PopupBorderPrimary}"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Margin" Value="10"/>
    <Setter Property="Border.CornerRadius" Value="8"/>
  </Style>
  <Style x:Key="EditorContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.MinWidth" Value="122"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderStyle}" Margin="16,10"/>
            <Border Style="{DynamicResource PopupInnerBorderStyle}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Margin="16,10">
              <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                Margin="{TemplateBinding FrameworkElement.Margin}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupBorderLessContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.MinWidth" Value="122"/>
    <Setter Property="FrameworkElement.Margin" Value="0,8"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderLessBorderStyle}"/>
            <Border Style="{DynamicResource PopupBorderLessInnerBorderStyle}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
              <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                Margin="{TemplateBinding FrameworkElement.Margin}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupBorderLessBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource PopupBackground}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
  </Style>
  <Style x:Key="PopupBorderLessInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource PopupBorderPrimary}"/>
    <Setter Property="Border.Background" Value="Transparent"/>
  </Style>
  <Style x:Key="WindowContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.MinWidth" Value="122"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource WindowBorderStyle}"/>
            <Border Style="{DynamicResource WindowInnerBorderStyle}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
              <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                Margin="{TemplateBinding FrameworkElement.Margin}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NormalWindowContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Style="{DynamicResource WindowInnerBorderStyle}" Background="{DynamicResource PopupBackground}"
                  Margin="0">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                              Margin="{TemplateBinding FrameworkElement.Margin}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.MinWidth" Value="122"/>
    <Setter Property="FrameworkElement.Margin" Value="0,4"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid Background="Transparent">
            <Border Name="bd" Style="{DynamicResource PopupBorderStyle}"/>
            <Border Style="{DynamicResource PopupInnerBorderStyle}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
              <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                Margin="{TemplateBinding FrameworkElement.Margin}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToastBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="16" Opacity="0.25" ShadowDepth="16" Direction="270"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="QuickAddWindowBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="32" Opacity="0.25" ShadowDepth="16" Direction="270"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PomoActiveBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="20" Opacity="0.25" ShadowDepth="10" Direction="270"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PomoNormalBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="12" Opacity="0.15" ShadowDepth="6" Direction="270"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HoverBorderStyle10" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Border.CornerRadius" Value="4"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity10}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HoverBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity10}"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Border.CornerRadius" Value="4"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity5}"/>
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Border.CornerRadius" Value="4"/>
    <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle2" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="Border.BorderBrush" Value="Transparent"/>
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.15" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.15" To="0" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle10_20" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.1"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.2" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle40_60" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.4"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.6" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.4" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Storyboard x:Key="SelectedStory">
    <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseIn"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="UnSelectedStory">
    <DoubleAnimation Duration="0:0:0.09" To="0.4" Storyboard.TargetProperty="Opacity">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseIn"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Style x:Key="TabBarItemBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.4"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Selected}" Value="True">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource SelectedStory}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource UnSelectedStory}"/>
        </TriggerBase.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="OpacityHoverButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.4"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  MinWidth="{TemplateBinding FrameworkElement.MinWidth}"
                  MinHeight="{TemplateBinding FrameworkElement.MinHeight}" CornerRadius="4"
                  HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}"
                  VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.4" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle40_100" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.4"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.4" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle60_80" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.6"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.8" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.6" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle1_100" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.01"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.01" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle80_100" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.8"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.6" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SmoothHoverBorderStyle60_100" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Opacity" Value="0.6"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseIn"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0.6" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation.EasingFunction>
                  <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ArrowPathStyle" TargetType="{x:Type Path}">
    <Setter Property="FrameworkElement.Width" Value="12"/>
    <Setter Property="FrameworkElement.Height" Value="12"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="Path.Data" Value="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
    <Setter Property="FrameworkElement.Margin" Value="4,0,0,0"/>
    <Setter Property="Shape.Stretch" Value="Uniform"/>
  </Style>
  <Style x:Key="ListPathStyle" TargetType="{x:Type Path}">
    <Setter Property="FrameworkElement.MaxHeight" Value="16"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="16"/>
    <Setter Property="Shape.Stretch" Value="Uniform"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
  </Style>
  <Style x:Key="TaskListViewTitleStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBlock.FontSize" Value="{DynamicResource Font12}"/>
    <Style.Triggers>
      <Trigger Property="TextBlock.Text" Value="">
        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TaskListViewTextBoxTitleStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Control.FontSize" Value="14"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="TextBox.MaxLines" Value="1"/>
    <Setter Property="FrameworkElement.Height" Value="36"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Margin" Value="10,0"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
  </Style>
  <Style x:Key="TaskListViewLineStyle" TargetType="{x:Type Line}">
    <Setter Property="Shape.Stroke" Value="{DynamicResource BaseColorOpacity5}"/>
    <Setter Property="Line.X1" Value="0"/>
    <Setter Property="Line.X2" Value="10"/>
    <Setter Property="Shape.Stretch" Value="Fill"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Shape.StrokeThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
  </Style>
  <Style x:Key="TaskPathStyle" TargetType="{x:Type Path}">
    <Setter Property="FrameworkElement.Height" Value="14"/>
    <Setter Property="FrameworkElement.Width" Value="14"/>
    <Setter Property="Shape.Stretch" Value="Uniform"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
  </Style>
  <Style x:Key="LoadingIndicatorRingStyle" TargetType="{x:Type views:LoadingIndicator}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type views:LoadingIndicator}">
          <Border x:Name="PART_Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SizeStates">
                <VisualState x:Name="Large"/>
                <VisualState x:Name="Small"/>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualState x:Name="Inactive"/>
                <VisualState x:Name="Active">
                  <Storyboard SpeedRatio="{TemplateBinding views:LoadingIndicator.SpeedRatio}">
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" Storyboard.TargetName="PART_Ellipse0"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetName="PART_Ellipse1"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetName="PART_Ellipse2"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetName="PART_Ellipse3"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetName="PART_Ellipse4"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetName="PART_Ellipse5"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetName="PART_Ellipse6"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetName="PART_Ellipse7"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" Storyboard.TargetName="PART_Ellipse0"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetName="PART_Ellipse1"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetName="PART_Ellipse2"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetName="PART_Ellipse3"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetName="PART_Ellipse4"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetName="PART_Ellipse5"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetName="PART_Ellipse6"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetName="PART_Ellipse7"
                                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1"/>
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Background="Transparent" Width="{TemplateBinding FrameworkElement.Width}"
                  Height="{TemplateBinding FrameworkElement.Height}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type Ellipse}">
                  <Setter Property="UIElement.RenderTransformOrigin" Value="0.5,0.5"/>
                  <Setter Property="FrameworkElement.Width" Value="3"/>
                  <Setter Property="FrameworkElement.Height" Value="3"/>
                  <Setter Property="UIElement.RenderTransform">
                    <Setter.Value>
                      <ScaleTransform ScaleX="0" ScaleY="0"/>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Resources>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Ellipse x:Name="PART_Ellipse0" Grid.Row="0" Grid.Column="2" Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse1" Grid.Row="0" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2"
                       Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse2" Grid.Row="2" Grid.Column="4" Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse3" Grid.Row="3" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2"
                       Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse4" Grid.Row="4" Grid.Column="2" Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse5" Grid.Row="3" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2"
                       Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse6" Grid.Row="2" Grid.Column="0" Fill="{TemplateBinding Control.Foreground}"/>
              <Ellipse x:Name="PART_Ellipse7" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2"
                       Fill="{TemplateBinding Control.Foreground}"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SettingTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="14"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
  </Style>
  <Style x:Key="SettingTitleStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="15"/>
    <Setter Property="TextBlock.FontWeight" Value="Bold"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="FrameworkElement.Margin" Value="38,52,0,0"/>
  </Style>
  <Style x:Key="SettingUnitStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="11"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity60}"/>
    <Setter Property="FrameworkElement.Margin" Value="8,0,0,0"/>
  </Style>
  <Style x:Key="SettingHintStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="13"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="FrameworkElement.Margin" Value="8,0,0,0"/>
  </Style>
  <Style x:Key="PasswordTextStyle" TargetType="{x:Type PasswordBox}">
    <Setter Property="FrameworkElement.Height" Value="36"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="Control.FontSize" Value="14"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="PasswordBox.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="4,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Border x:Name="border" BorderThickness="1" CornerRadius="4"
                  BorderBrush="{DynamicResource BaseColorOpacity10}">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource BaseColorOpacity10_20}" Property="Control.Background"/>
              <Setter Value="{DynamicResource BaseColorOpacity20}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true">
              <Setter Property="Control.Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProjectTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource ProjectMenuColorOpacity80}"/>
    <Setter Property="TextBlock.FontSize" Value="14"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Margin" Value="8"/>
  </Style>
  <Style x:Key="IconTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource LeftBarColorOpacity80}"/>
    <Setter Property="TextBlock.FontSize" Value="14"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Margin" Value="10"/>
  </Style>
  <Style x:Key="ProjectIconStyle" TargetType="{x:Type Path}">
    <Setter Property="Shape.Fill" Value="{DynamicResource ProjectMenuColorOpacity40}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="Shape.Stretch" Value="Uniform"/>
    <Setter Property="FrameworkElement.Width" Value="24"/>
    <Setter Property="FrameworkElement.Height" Value="24"/>
  </Style>
  <Style x:Key="ListButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="{DynamicResource Height36}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.FontSize" Value="{DynamicResource Font13}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" Margin="4,0" CornerRadius="4">
            <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12,0"
                       TextTrimming="CharacterEllipsis" FontSize="{TemplateBinding Control.FontSize}"
                       Text="{TemplateBinding ContentControl.Content}" Foreground="{TemplateBinding Control.Foreground}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.45"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListItemButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="{DynamicResource Height36}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HoverUnderlineStyle" TargetType="{x:Type TextBlock}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GridHoverStyle" TargetType="{x:Type Grid}">
    <Setter Property="Panel.Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Panel.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="FrameworkElement.Margin" Value="0,6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Background="#14191919" Height="1"
                  SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NormalWindowStyle" TargetType="{x:Type Window}">
    <Setter Property="Window.AllowsTransparency" Value="true"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter Property="Control.BorderBrush" Value="White"/>
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundPrimary}"/>
    <Setter Property="Window.WindowStyle" Value="None"/>
    <Setter Property="Window.ShowInTaskbar" Value="false"/>
    <Setter Property="Window.Title" Value="    "/>
    <Setter Property="Window.Topmost" Value="true"/>
    <Setter Property="Control.FontFamily"
            Value="{Binding Source={x:Static resource:LocalSettings.Settings}, Path=FontFamily}"/>
    <Setter Property="FrameworkElement.Width" Value="460"/>
    <Setter Property="Window.SizeToContent" Value="Height"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.BorderThickness" Value="0,0,0,1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="10" Opacity="0.3" ShadowDepth="0"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Border Background="{TemplateBinding Control.Background}" BorderThickness="0" Margin="10" CornerRadius="6">
            <AdornerDecorator>
              <ContentPresenter/>
            </AdornerDecorator>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomWindowStyle2" TargetType="{x:Type Window}">
    <Setter Property="Window.AllowsTransparency" Value="true"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundPrimary}"/>
    <Setter Property="Window.WindowStyle" Value="None"/>
    <Setter Property="Window.ShowInTaskbar" Value="false"/>
    <Setter Property="Window.Title" Value="    "/>
    <Setter Property="Window.Topmost" Value="true"/>
    <Setter Property="Control.FontFamily"
            Value="{Binding Source={x:Static resource:LocalSettings.Settings}, Path=FontFamily}"/>
    <Setter Property="FrameworkElement.Width" Value="460"/>
    <Setter Property="Window.SizeToContent" Value="Height"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="18" Opacity="0.3" ShadowDepth="0"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}" BorderThickness="0" Margin="10" CornerRadius="12">
              <AdornerDecorator>
                <ContentPresenter/>
              </AdornerDecorator>
            </Border>
            <Border BorderBrush="{DynamicResource DarkBorderColor}" BorderThickness="1" Margin="10" CornerRadius="12"/>
            <Border Margin="10,10,10,0" Height="40" VerticalAlignment="Top" Background="Transparent"
                    BorderBrush="{DynamicResource BaseColorOpacity5}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
              <Grid Background="Transparent" HorizontalAlignment="Stretch">
                <Border Name="CloseButton" HorizontalAlignment="Right" VerticalAlignment="Top" Width="44" Height="44"
                        Cursor="Hand" Style="{DynamicResource SmoothHoverBorderStyle40_60}" Margin="0, 0, 0, 0"
                        Tag="0,4,0,0">
                  <Path Width="18" Height="18" Stretch="Uniform" Fill="{DynamicResource BaseColorOpacity100}"
                        Data="{Binding Source={StaticResource IcX}, Path=Data}"/>
                </Border>
                <Grid Name="DragGrid" Margin="0,0,45,0" Background="Transparent"/>
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
    <Setter Property="Window.AllowsTransparency" Value="true"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter Property="Control.BorderBrush" Value="White"/>
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundPrimary}"/>
    <Setter Property="Window.WindowStyle" Value="None"/>
    <Setter Property="Window.ShowInTaskbar" Value="false"/>
    <Setter Property="Window.Title" Value="    "/>
    <Setter Property="Window.Topmost" Value="true"/>
    <Setter Property="Control.FontFamily"
            Value="{Binding Source={x:Static resource:LocalSettings.Settings}, Path=FontFamily}"/>
    <Setter Property="FrameworkElement.Width" Value="460"/>
    <Setter Property="Window.SizeToContent" Value="Height"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.BorderThickness" Value="0,0,0,1"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="18" Opacity="0.3" ShadowDepth="0"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}" BorderThickness="0" Margin="10" CornerRadius="12">
              <AdornerDecorator>
                <ContentPresenter/>
              </AdornerDecorator>
            </Border>
            <Border BorderBrush="{DynamicResource DarkBorderColor}" BorderThickness="1" Margin="10" CornerRadius="12"/>
            <Border Margin="10,10,10,0" Height="45" VerticalAlignment="Top" Background="Transparent"
                    BorderBrush="{DynamicResource BaseColorOpacity5}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
              <Grid Background="Transparent" HorizontalAlignment="Stretch">
                <TextBlock FontSize="16" Foreground="{DynamicResource BaseColorOpacity100}" HorizontalAlignment="Center"
                           MaxWidth="320" Margin="0,12,0,0" VerticalAlignment="Center" FontWeight="Bold"
                           TextTrimming="CharacterEllipsis" Text="{TemplateBinding Window.Title}"/>
                <Border Name="CloseButton" HorizontalAlignment="Right" VerticalAlignment="Top" Width="30" Height="30"
                        Cursor="Hand" Style="{DynamicResource SmoothHoverBorderStyle60_100}" Margin="0, 12, 12, 0">
                  <Grid Width="24" Height="24" Background="Transparent" VerticalAlignment="Center">
                    <Polygon Name="x" Fill="{DynamicResource BaseColorOpacity100_80}" Margin="11,0,0,0">
                      <Polygon.Points>
                        <Binding Source="{StaticResource ic_svg_polygon_close}" Path="Points"/>
                      </Polygon.Points>
                    </Polygon>
                  </Grid>
                </Border>
                <Grid Name="DragGrid" Margin="0,0,45,0" Background="Transparent"/>
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="OkCancelWindowsStyle" TargetType="{x:Type Window}"
         BasedOn="{StaticResource CustomWindowStyle}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Control.Background}" BorderThickness="0" Margin="10" CornerRadius="12">
              <AdornerDecorator>
                <ContentPresenter/>
              </AdornerDecorator>
            </Border>
            <Border BorderBrush="{DynamicResource DarkBorderColor}" BorderThickness="1" Margin="10" CornerRadius="12"/>
            <Grid Name="TitleGrid" Background="Transparent" VerticalAlignment="Top" Margin="30,10"
                  HorizontalAlignment="Stretch" Height="45">
              <TextBlock FontSize="16" Foreground="{DynamicResource BaseColorOpacity100}" Margin="0,0,0,0"
                         VerticalAlignment="Center" FontWeight="Bold" HorizontalAlignment="Center" TextAlignment="Center"
                         TextTrimming="CharacterEllipsis" Text="{TemplateBinding Window.Title}"/>
              <Grid Name="DragGrid" Margin="0,0,0,0" Background="Transparent"/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SettingTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.Width" Value="128"/>
    <Setter Property="FrameworkElement.Height" Value="30"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="Control.FontSize" Value="14"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100}"/>
    <Setter Property="Control.Padding" Value="4,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="border" BorderBrush="{DynamicResource BaseColorOpacity10}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4"
                  Background="{TemplateBinding Control.Background}">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource BaseColorOpacity10_20}" Property="Control.Background"/>
              <Setter Value="{DynamicResource BaseColorOpacity20}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true">
              <Setter Property="Control.Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="FrameworkElement.Width" Value="100"/>
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="UIElement.Opacity" Value="1"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid x:Name="templateRoot" HorizontalAlignment="Stretch"
                Width="{TemplateBinding FrameworkElement.Width}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            </Grid.ColumnDefinitions>
            <Border Name="ViewBorder" Grid.ColumnSpan="2" BorderThickness="1"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{DynamicResource BaseColorOpacity20}" CornerRadius="4"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" HorizontalAlignment="Stretch" Grid.Column="0"
                   PopupAnimation="Fade" Grid.ColumnSpan="2" HorizontalOffset="-5" VerticalOffset="-5"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ContentControl Style="{DynamicResource PopupContentStyle}" MinWidth="50">
                <ScrollViewer x:Name="DropDownScrollViewer" MaxWidth="{TemplateBinding FrameworkElement.MaxWidth}"
                              Style="{StaticResource for_scrollviewer}" MaxHeight="240"
                              MinWidth="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource ComoBoxMinWidth}}">
                  <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                      <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                                 Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                 Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                    </Canvas>
                    <ItemsPresenter x:Name="ItemsPresenter" Margin="0" KeyboardNavigation.DirectionalNavigation="Contained"/>
                  </Grid>
                </ScrollViewer>
              </ContentControl>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2"
                          Foreground="{DynamicResource BaseColorOpacity100}" Grid.Column="0"
                          Style="{StaticResource ComboBoxToggleButton}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter x:Name="contentPresenter" Grid.ColumnSpan="2" Margin="10,0,20,0" Grid.Column="0"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                              HorizontalAlignment="Stretch" IsHitTestVisible="false"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
                </Style>
              </FrameworkElement.Resources>
            </ContentPresenter>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ViewBorder" Value="{DynamicResource BaseColorOpacity5}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ComboBox.IsDropDownOpen" Value="true">
              <Setter TargetName="ViewBorder" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ComboBoxItem}">
          <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
          <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
          <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
          <Setter Property="FrameworkElement.Height" Value="30"/>
          <Setter Property="Control.FontSize" Value="13"/>
          <Setter Property="Control.Padding" Value="12,0"/>
          <Setter Property="Control.BorderThickness" Value="0"/>
          <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                        VerticalAlignment="Center" Margin="4,0" CornerRadius="4"
                        Height="{TemplateBinding FrameworkElement.Height}">
                  <Grid>
                    <ContentPresenter Name="Cp" HorizontalAlignment="Stretch" Margin="0,0,24,0"
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    <Path Name="CheckIcon" IsHitTestVisible="false" HorizontalAlignment="Right" Width="12" Height="12"
                          Style="{DynamicResource Path01}" Fill="{DynamicResource TextAccentColor}"
                          Data="{Binding Source={StaticResource IcCheck}, Path=Data}"/>
                  </Grid>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="UIElement.IsEnabled" Value="true">
                    <Setter TargetName="Bd" Property="Border.Background" Value="Transparent"/>
                  </Trigger>
                  <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter TargetName="Bd" Value="{DynamicResource BaseColorOpacity3}" Property="Border.Background"/>
                  </Trigger>
                  <Trigger Property="ListBoxItem.IsSelected" Value="true">
                    <Setter TargetName="Cp" Value="{DynamicResource TextAccentColor}" Property="TextElement.Foreground"/>
                    <Setter TargetName="CheckIcon" Property="UIElement.Visibility" Value="Visible"/>
                  </Trigger>
                  <Trigger Property="ListBoxItem.IsSelected" Value="false">
                    <Setter TargetName="Cp" Value="{DynamicResource BaseColorOpacity100_80}" Property="TextElement.Foreground"/>
                    <Setter TargetName="CheckIcon" Property="UIElement.Visibility" Value="Collapsed"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.6"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TopComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid x:Name="templateRoot" HorizontalAlignment="Stretch"
                Width="{TemplateBinding FrameworkElement.Width}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            </Grid.ColumnDefinitions>
            <Border Name="ViewBorder" Grid.ColumnSpan="2" BorderThickness="1"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{DynamicResource BaseColorOpacity20}" CornerRadius="4"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" HorizontalAlignment="Stretch" Grid.Column="0"
                   PopupAnimation="Fade" Grid.ColumnSpan="2" HorizontalOffset="-5" VerticalOffset="5" Placement="Top"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ContentControl Style="{DynamicResource PopupContentStyle}" MinWidth="50">
                <ScrollViewer x:Name="DropDownScrollViewer" MaxWidth="{TemplateBinding FrameworkElement.MaxWidth}"
                              Style="{StaticResource for_scrollviewer}" MaxHeight="240"
                              MinWidth="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource ComoBoxMinWidth}}">
                  <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                      <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                                 Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                 Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                    </Canvas>
                    <ItemsPresenter x:Name="ItemsPresenter" Margin="0" KeyboardNavigation.DirectionalNavigation="Contained"/>
                  </Grid>
                </ScrollViewer>
              </ContentControl>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2"
                          Foreground="{DynamicResource BaseColorOpacity100}" Grid.Column="0"
                          Style="{StaticResource ComboBoxToggleButton}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter x:Name="contentPresenter" Grid.ColumnSpan="2" Margin="10,0,20,0" Grid.Column="0"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                              HorizontalAlignment="Stretch" IsHitTestVisible="false"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
                </Style>
              </FrameworkElement.Resources>
            </ContentPresenter>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ViewBorder" Value="{DynamicResource BaseColorOpacity5}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ComboBox.IsDropDownOpen" Value="true">
              <Setter TargetName="ViewBorder" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NoBorderTextStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Background="{TemplateBinding Control.Background}">
            <Border x:Name="bg">
              <ScrollViewer x:Name="PART_ContentHost" CanContentScroll="true"
                            VerticalScrollBarVisibility="{TemplateBinding TextBoxBase.VerticalScrollBarVisibility}"
                            Style="{DynamicResource for_scrollviewer}"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EditTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource TextBoxBackground}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="bg" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.Background}">
            <ScrollViewer x:Name="PART_ContentHost"
                          VerticalScrollBarVisibility="{TemplateBinding TextBoxBase.VerticalScrollBarVisibility}"
                          Style="{DynamicResource for_scrollviewer}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="bg" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
              <Setter TargetName="bg" Property="Border.Background" Value="Transparent"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
        <Brush.Transform>
          <TranslateTransform X="12"/>
        </Brush.Transform>
        <VisualBrush.Visual>
          <TextBlock Text="" VerticalAlignment="Center" FontSize="14"/>
        </VisualBrush.Visual>
      </VisualBrush>
      <Style TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="4"/>
        <Setter Property="Border.Background" Value="Transparent"/>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="HintTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <ScrollViewer x:Name="PART_ContentHost" CanContentScroll="true"/>
            <TextBlock x:Name="hintText" Text="{TemplateBinding FrameworkElement.Tag}" Visibility="Collapsed"
                       IsHitTestVisible="false" Padding="{TemplateBinding Control.Padding}"
                       Style="{DynamicResource Body05}" FontSize="{TemplateBinding Control.FontSize}" Margin="2,0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="TextBox.Text">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TextBox.Text" Value="">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HintEditNoBorderTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <TextBlock x:Name="hintText" Text="{TemplateBinding FrameworkElement.Tag}" Visibility="Collapsed"
                       VerticalAlignment="Center" Margin="2,0,0,0" TextTrimming="CharacterEllipsis"
                       Style="{DynamicResource Body05}" Padding="{TemplateBinding Control.Padding}"
                       Foreground="{DynamicResource BaseColorOpacity20}" FontSize="{TemplateBinding Control.FontSize}"/>
            <ScrollViewer x:Name="PART_ContentHost" CanContentScroll="true"
                          VerticalScrollBarVisibility="{TemplateBinding TextBoxBase.VerticalScrollBarVisibility}"
                          Style="{DynamicResource for_scrollviewer}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="TextBox.Text">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TextBox.Text" Value="">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HintEditTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Border x:Name="bg" BorderBrush="{DynamicResource BaseColorOpacity10}" BorderThickness="1" CornerRadius="4"/>
            <TextBlock x:Name="hintText" Text="{TemplateBinding FrameworkElement.Tag}" Visibility="Collapsed"
                       VerticalAlignment="Center" Margin="2,0,0,0" TextTrimming="CharacterEllipsis"
                       Style="{DynamicResource Body05}" Padding="{TemplateBinding Control.Padding}"
                       Foreground="{DynamicResource BaseColorOpacity20}" FontSize="{TemplateBinding Control.FontSize}"/>
            <ScrollViewer x:Name="PART_ContentHost" CanContentScroll="true"
                          VerticalScrollBarVisibility="{TemplateBinding TextBoxBase.VerticalScrollBarVisibility}"
                          Style="{DynamicResource for_scrollviewer}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="bg" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="TextBox.Text">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TextBox.Text" Value="">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BatchHintEditTextStyle" BasedOn="{StaticResource HintEditTextStyle}"
         TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
  </Style>
  <Style x:Key="isCompleteCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BaseColorOpacity40}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid x:Name="templateRoot" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid>
              <Border Name="HoverBackground" Background="Transparent" CornerRadius="1" Margin="1"/>
              <Path Name="checkBoxBorderNone" Fill="{DynamicResource BaseColorOpacity40}"
                    Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                    Stretch="Uniform" Data="{Binding Source={StaticResource IcCheckBox}, Path=Data}"/>
              <Path Name="checkBoxBorderCheck" Visibility="Collapsed" Fill="{DynamicResource BaseColorOpacity20}"
                    Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                    Stretch="Uniform" Data="{Binding Source={StaticResource IcChecked}, Path=Data}"/>
            </Grid>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter Property="Control.Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <Trigger Property="ButtonBase.IsPressed" Value="true"/>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="HoverBackground" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="HoverBackground" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="checkBoxBorderCheck" Value="{DynamicResource BaseColorOpacity40}" Property="Shape.Fill"/>
              <Setter TargetName="HoverBackground" Value="{DynamicResource BaseColorOpacity10}"
                      Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ToolTip}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ToolTip.HasDropShadow" Value="true"/>
    <Setter Property="Panel.ZIndex" Value="100"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Background="{DynamicResource ToolTipBackColor}" CornerRadius="4">
            <Border Name="BD" Background="{DynamicResource ToolTipTopColor}"
                    Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                    BorderThickness="0" CornerRadius="4">
              <UIElement.Effect>
                <DropShadowEffect Color="#000000" Opacity="0.12" BlurRadius="11" ShadowDepth="2" Direction="280"/>
              </UIElement.Effect>
              <Grid Margin="6">
                <wpf:EmjTextBlock Name="TB" Style="{DynamicResource Tag01}" Foreground="White" TextTrimming="CharacterEllipsis"
                                  Text="{TemplateBinding ContentControl.Content}" TextAlignment="Center" MaxWidth="250"
                                  TextWrapping="Wrap"/>
              </Grid>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TooltipStyle" TargetType="{x:Type ToolTip}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ToolTip.HasDropShadow" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Background="{DynamicResource ToolTipBackColor}" CornerRadius="2">
            <Border Name="BD" Background="{DynamicResource ToolTipTopColor}"
                    Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                    BorderThickness="0" CornerRadius="2">
              <UIElement.Effect>
                <DropShadowEffect Color="#000000" Opacity="0.12" BlurRadius="11" ShadowDepth="2" Direction="280"/>
              </UIElement.Effect>
              <Grid Margin="6">
                <TextBlock Name="TB" Style="{DynamicResource Tag01}" Foreground="White" TextTrimming="CharacterEllipsis"
                           Text="{TemplateBinding ContentControl.Content}" TextAlignment="Center" MaxWidth="300"
                           TextWrapping="Wrap"/>
              </Grid>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" Cursor="Hand">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClickIconFlatStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.Width" Value="20"/>
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="FrameworkElement.Margin" Value="8,0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Name="bd" Style="{DynamicResource ClickIconBorderStyle}">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClickIconStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="FrameworkElement.Width" Value="20"/>
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="FrameworkElement.Margin" Value="8,0"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Name="bd" Style="{DynamicResource ClickIconBorderStyle}">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ConditionalIconStyle" TargetType="{x:Type ContentControl}"
         BasedOn="{StaticResource ClickIconStyle}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsFlatMode}" Value="True">
        <Setter Property="FrameworkElement.Style" Value="{StaticResource ClickIconFlatStyle}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ClickIconBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="2"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="false">
        <Setter Property="Border.Background" Value="Transparent"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CanSelectBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Height" Value="35"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Height="13" Width="13" Cursor="Hand">
                <Ellipse Name="RadioOuter" Fill="Transparent" Stroke="{DynamicResource BaseColorOpacity40}"
                         StrokeThickness="1"/>
                <Ellipse Name="RadioMark" Height="8" Width="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                         Fill="{DynamicResource BaseColorOpacity40}" Visibility="Hidden"/>
              </Grid>
            </BulletDecorator.Bullet>
            <TextBlock Name="Text" Padding="8,0,0,0" Margin="0,-0.5,0,0"
                       Foreground="{DynamicResource BaseColorOpacity100}" FontSize="13" VerticalAlignment="Center"
                       HorizontalAlignment="Left">
              <ContentPresenter/>
            </TextBlock>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="RadioMark" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="RadioOuter" Value="{DynamicResource PrimaryColor}" Property="Shape.Stroke"/>
              <Setter TargetName="RadioMark" Value="{DynamicResource PrimaryColor}" Property="Shape.Fill"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BlackRadioButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Height="16" Width="16">
                <Border Name="RadioOuter" Background="Transparent" BorderBrush="{DynamicResource BaseColorOpacity40}"
                        BorderThickness="1.5" CornerRadius="8"/>
                <Border Name="RadioMark" CornerRadius="8" Margin="5" Background="{DynamicResource BaseColorOpacity100}"
                        Visibility="Hidden"/>
              </Grid>
            </BulletDecorator.Bullet>
            <TextBlock Margin="4,-1,0,0" Foreground="{DynamicResource BaseColorOpacity100}" FontSize="13"
                       VerticalAlignment="Center">
              <ContentPresenter/>
            </TextBlock>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="RadioMark" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="RadioOuter" Value="{DynamicResource BaseColorOpacity40}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderRepeatButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="{DynamicResource BaseColorOpacity10}" Height="6" Margin="-4,0,0,0"
                  CornerRadius="0,3,3,0"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderRepeatButton1" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="{DynamicResource PrimaryColor}" Height="6" Margin="0,0,-4,0" BorderThickness="0"
                  CornerRadius="3,0,0,3"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderThumb" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Cursor="Hand">
            <Border Width="14" Height="14" CornerRadius="7" BorderThickness="2" BorderBrush="White"
                    Background="{DynamicResource PrimaryColor}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Slider" TargetType="{x:Type Slider}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <Track x:Name="PART_Track" Grid.Row="1">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource SliderRepeatButton1}" Command="Slider.DecreaseLarge"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource SliderThumb}"/>
        </Track.Thumb>
      </Track>
    </Grid>
  </ControlTemplate>
  <Style x:Key="Horizontal_Slider" TargetType="{x:Type Slider}">
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Style.Triggers>
      <Trigger Property="Slider.Orientation" Value="Horizontal">
        <Setter Property="FrameworkElement.MinHeight" Value="21"/>
        <Setter Property="FrameworkElement.MinWidth" Value="104"/>
        <Setter Property="Control.Template" Value="{StaticResource Slider}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TaskBarTooltip" TargetType="{x:Type ToolTip}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ToolTip.HasDropShadow" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Name="BD" Background="#D8191919" Width="{TemplateBinding FrameworkElement.Width}"
                  Height="{TemplateBinding FrameworkElement.Height}" BorderThickness="0" CornerRadius="2">
            <UIElement.Effect>
              <DropShadowEffect Color="#000000" Opacity="0.12" BlurRadius="11" ShadowDepth="2" Direction="280"/>
            </UIElement.Effect>
            <Grid Margin="12,10">
              <TextBlock Name="TB" Style="{DynamicResource Tag01}" Foreground="White" LineHeight="16"
                         TextTrimming="CharacterEllipsis" Text="{TemplateBinding ContentControl.Content}" MaxWidth="250"
                         TextWrapping="Wrap"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="TB" Value="{x:Null}" Property="TextBlock.Text">
              <Setter TargetName="BD" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="TB" Value="{x:Static system:String.Empty}" Property="TextBlock.Text">
              <Setter TargetName="BD" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TimeTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{DynamicResource Font12}"/>
    <Setter Property="TextBlock.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="TextBlock.TextAlignment" Value="Center"/>
    <Setter Property="TextBlock.FontFamily"
            Value="{Binding Source={x:Static resource:LocalSettings.Settings}, Path=FontFamily}"/>
    <Setter Property="TextBlock.Text">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource TaskListDateConverter}">
          <Binding Path="StartDate"/>
          <Binding Path="DueDate"/>
          <Binding Path="IsAllDay"/>
          <Binding Path="Status"/>
          <Binding Source="{x:Static resource:LocalSettings.Settings}" Path="ShowCountDown"/>
          <Binding Source="{x:Static resource:LocalSettings.Settings}" Path="ShowDetails"/>
          <Binding Path="IsNote"/>
          <Binding Path="InMatrix"/>
          <Binding Path="InTomorrow"/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBlock.Foreground">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource TaskListDateColorConverter}">
          <Binding Path="StartDate"/>
          <Binding Path="DueDate"/>
          <Binding Path="IsAllDay"/>
          <Binding Path="Status"/>
          <Binding Path="." RelativeSource="{RelativeSource Mode=Self}"/>
          <Binding Source="{x:Static resource:LocalSettings.Settings}" Path="ShowCountDown"/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
  </Style>
  <VisualBrush x:Key="HatchBrush" TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute"
               Viewbox="0,0,10,10" ViewboxUnits="Absolute">
    <VisualBrush.Visual>
      <Canvas>
        <Path Stroke="#31191919" Data="M 10,0 L 0,10 "/>
      </Canvas>
    </VisualBrush.Visual>
  </VisualBrush>
  <Style x:Key="ProjectItemHoverBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="UIElement.Opacity" Value="0"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid, AncestorLevel=1}, Path=IsMouseOver}"
                   Value="True">
        <Setter Property="Border.Background" Value="{DynamicResource ProjectHoverBackGround}"/>
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="1" Storyboard.TargetProperty="Opacity"/>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.09" To="0" Storyboard.TargetProperty="Opacity"/>
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="NormalListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="ListBox.SelectionMode" Value="Single"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="true"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="ItemsControl.ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListViewItem}">
          <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NoBorderTextBoxWithHint" TargetType="{x:Type TextBox}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource BaseColorOpacity100_80}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.FontSize" Value="{DynamicResource Font11}"/>
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="bg">
            <Grid>
              <TextBlock x:Name="hintText" Text="{TemplateBinding FrameworkElement.Tag}" Visibility="Collapsed"
                         VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                         Style="{DynamicResource Tag04}" FontSize="{TemplateBinding Control.FontSize}"/>
              <ScrollViewer x:Name="PART_ContentHost"
                            VerticalScrollBarVisibility="{TemplateBinding TextBoxBase.VerticalScrollBarVisibility}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            Style="{DynamicResource for_scrollviewer}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="TextBox.Text">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TextBox.Text" Value="">
              <Setter TargetName="hintText" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SplitLineStyle" TargetType="{x:Type Line}">
    <Setter Property="Line.X1" Value="0"/>
    <Setter Property="Line.X2" Value="1"/>
    <Setter Property="Shape.Stretch" Value="Fill"/>
    <Setter Property="Shape.Stroke" Value="{DynamicResource BaseColorOpacity5}"/>
    <Setter Property="Shape.StrokeThickness" Value="1"/>
  </Style>
  <ItemsPanelTemplate x:Key="WrapPanelTemplate">
    <WrapPanel/>
  </ItemsPanelTemplate>
</ResourceDictionary>