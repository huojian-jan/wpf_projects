<UserControl x:Class="ticktick_WPF.Views.Time.SetDateTimeControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:ticktick_WPF.Views.Time"
             xmlns:converter="clr-namespace:ticktick_WPF.Converter"
             xmlns:viewModels="clr-namespace:ticktick_WPF.ViewModels"
             x:Name="Root">
  <FrameworkElement.Resources>
    <Style TargetType="{x:Type TextBlock}">
      <Setter Property="TextBlock.FontSize" Value="12"/>
      <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
      <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
      <Setter Property="TextBlock.Padding" Value="3,0,3,0"/>
    </Style>
    <Style TargetType="{x:Type Line}">
      <Setter Property="Line.X1" Value="0"/>
      <Setter Property="Line.X2" Value="234"/>
      <Setter Property="Shape.StrokeThickness" Value="1"/>
      <Setter Property="Shape.Stroke" Value="{DynamicResource BaseColorOpacity5}"/>
    </Style>
    <Style TargetType="{x:Type Popup}">
      <Setter Property="Popup.Placement" Value="Relative"/>
      <Setter Property="Popup.AllowsTransparency" Value="true"/>
      <Setter Property="Popup.VerticalOffset" Value="14"/>
      <Setter Property="Popup.HorizontalOffset" Value="-62"/>
      <Setter Property="Popup.StaysOpen" Value="true"/>
    </Style>
    <Style x:Key="HorizontalLineStyle" TargetType="{x:Type Line}">
      <Setter Property="Shape.Stroke" Value="{DynamicResource BaseColorOpacity5}"/>
      <Setter Property="Line.X1" Value="0"/>
      <Setter Property="Line.X2" Value="1"/>
      <Setter Property="Shape.Stretch" Value="Fill"/>
      <Setter Property="UIElement.Opacity" Value="1"/>
      <Setter Property="Shape.StrokeThickness" Value="1"/>
      <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
    </Style>
    <converter:DateBackgroundConverter x:Key="DateBackgroundConverter"/>
  </FrameworkElement.Resources>
  <StackPanel>
    <local:TickDatePicker x:Name="Calendar" SelectedDateChanged="OnSelectedDateChanged" DateSelected="OnDateSelectedAndSave"
                          Margin="10,0" HorizontalAlignment="Stretch"/>
    <StackPanel Name="TimeInputPanel" Margin="0,12,0,0">
      <Grid Background="Transparent">
        <Border MouseLeftButtonDown="OnShowPopupButtonMouseDown" MouseLeftButtonUp="SelectTimeClick"
                Name="DateBorder" Height="34" Margin="4,0" BorderThickness="0" CornerRadius="4" Cursor="Hand">
          <FrameworkElement.Style>
            <Style TargetType="{x:Type Border}">
              <Setter Property="Border.Background" Value="Transparent"/>
              <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
                </Trigger>
                <DataTrigger Binding="{Binding ElementName=TimePointControl, Path=PopupOpen}" Value="True">
                  <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=Root, Path=TimeTabSelect}" Value="True">
                  <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </FrameworkElement.Style>
          <Grid Margin="6,0,4,0">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
              <Path IsHitTestVisible="false" Margin="8,0" Stretch="Fill" Width="16" Height="16"
                    Data="{Binding Source={StaticResource IcDate}, Path=Data}">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Path}">
                    <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity60}"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ElementName=TimePointControl, Path=IsVisible}" Value="True">
                        <Setter Property="Shape.Fill" Value="{DynamicResource PrimaryColor}"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Path>
              <TextBlock Text="{StaticResource Time}" Style="{DynamicResource Body12}" IsHitTestVisible="false"
                         HorizontalAlignment="Center" FontSize="13" Foreground="{DynamicResource BaseColorOpacity80}"
                         Visibility="{Binding ElementName=TimePointControl, Path=IsVisible, Converter={StaticResource VisibleConverter}}"/>
              <local:TimeInputControl x:Name="TimePointControl" HorizontalAlignment="Right" BorderThick="0" FontSize="13" Height="24"
                                      ShowTimeZone="true" DropWidth="266" Margin="0,0,24,0" Foreground="{DynamicResource PrimaryColor}"/>
            </StackPanel>
            <Border MouseLeftButtonUp="OnClearTimeClick" Width="24" VerticalAlignment="Center" BorderThickness="0"
                    Cursor="Hand" Background="Transparent" HorizontalAlignment="Right">
              <Path Name="RightIcon" Fill="{DynamicResource BaseColorOpacity40}" Width="14" Height="14"
                    VerticalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                  <RotateTransform Angle="-90"/>
                </UIElement.RenderTransform>
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Path}">
                    <Setter Property="Path.Data" Value="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ElementName=TimePointControl, Path=PopupOpen}" Value="True">
                        <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                      </DataTrigger>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition Binding="{Binding ElementName=DateBorder, Path=IsMouseOver}" Value="True"/>
                          <Condition Binding="{Binding Path=IsAllDay}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                      </MultiDataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Path>
            </Border>
          </Grid>
        </Border>
      </Grid>
    </StackPanel>
  </StackPanel>
</UserControl>