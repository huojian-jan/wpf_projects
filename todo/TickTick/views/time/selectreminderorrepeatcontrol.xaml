<UserControl x:Class="ticktick_WPF.Views.Time.SelectReminderOrRepeatControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:converter="clr-namespace:ticktick_WPF.Converter"
             xmlns:viewModels="clr-namespace:ticktick_WPF.ViewModels"
             xmlns:time="clr-namespace:ticktick_WPF.Views.Time"
             xmlns:misc="clr-namespace:ticktick_WPF.Views.Misc"
             Name="Root">
  <StackPanel MouseLeftButtonUp="OnPopupClick" Orientation="Vertical">
    <FrameworkElement.Resources>
      <converter:ReminderDisplayTextConverter x:Key="ReminderDisplayTextConverter"/>
      <converter:UntilDisplayTextConverter x:Key="UntilDisplayTextConverter"/>
      <converter:RepeatEndEnableConverter x:Key="RepeatEndEnableConverter"/>
      <converter:RepeatVisibilityConverter x:Key="RepeatVisibilityConverter"/>
      <Style TargetType="{x:Type Line}">
        <Setter Property="Line.X1" Value="0"/>
        <Setter Property="Line.X2" Value="234"/>
        <Setter Property="Shape.StrokeThickness" Value="0.5"/>
        <Setter Property="Shape.Stroke" Value="{DynamicResource BaseColorOpacity60}"/>
      </Style>
      <Style TargetType="{x:Type Popup}">
        <Setter Property="Popup.Placement" Value="Relative"/>
        <Setter Property="Popup.AllowsTransparency" Value="true"/>
        <Setter Property="Popup.VerticalOffset" Value="14"/>
        <Setter Property="Popup.HorizontalOffset" Value="-62"/>
        <Setter Property="Popup.StaysOpen" Value="false"/>
      </Style>
      <Style TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="White"/>
        <Setter Property="FrameworkElement.Height" Value="28"/>
        <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Background="{TemplateBinding Control.Background}">
                <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,10,0" TextBlock.FontSize="12"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="true">
            <Setter Property="Control.Background" Value="{StaticResource BaseColorOpacity5}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </FrameworkElement.Resources>
    <Border MouseLeftButtonDown="OnShowPopupButtonMouseDown" MouseLeftButtonUp="SelectReminderClick"
            Name="SelectReminderBtn" CornerRadius="4" Height="34" Cursor="Hand" Margin="4,0">
      <FrameworkElement.Style>
        <Style TargetType="{x:Type Border}">
          <Setter Property="Border.Background" Value="Transparent"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=SelectReminderPopup, Path=IsOpen}" Value="True">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Root, Path=TabSelectedIndex}" Value="0">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </FrameworkElement.Style>
      <Grid Margin="6,0,4,0">
        <StackPanel IsHitTestVisible="false" Orientation="Horizontal" HorizontalAlignment="Left">
          <Path IsHitTestVisible="false" Margin="8,0" Stretch="Fill" Width="16" Height="16"
                Data="{Binding Source={StaticResource IcReminder}, Path=Data}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}">
                <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity60}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ElementName=EmptyRemindText, Path=IsVisible}" Value="False">
                    <Setter Property="Shape.Fill" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Path>
          <TextBlock Name="EmptyRemindText" Text="{StaticResource reminder}" Style="{DynamicResource Body12}"
                     FontSize="13" Foreground="{DynamicResource BaseColorOpacity80}"
                     Visibility="{Binding ElementName=ReminderText, Path=Text, Converter={StaticResource TextVisibleConverter}, ConverterParameter=1}"/>
          <TextBlock Name="ReminderText" HorizontalAlignment="Center" IsHitTestVisible="false" MaxWidth="190"
                     TextTrimming="WordEllipsis" FontSize="13" Style="{DynamicResource Body10}"
                     Foreground="{DynamicResource PrimaryColor}">
            <TextBlock.Text>
              <MultiBinding Converter="{StaticResource ReminderDisplayTextConverter}">
                <Binding Path="Reminders"/>
                <Binding Path="IsAllDay"/>
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>
        </StackPanel>
        <Border MouseLeftButtonUp="OnClearRemindClick" HorizontalAlignment="Right" Width="26"
                Background="Transparent" Cursor="Hand"
                IsHitTestVisible="{Binding ElementName=EmptyRemindText, Path=IsVisible, Converter={StaticResource BoolInverseConverter}}">
          <Path Name="ReminderRightPath" Fill="{DynamicResource BaseColorOpacity40}" Width="14" Height="14"
                HorizontalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}">
                <Setter Property="Path.Data" Value="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding ElementName=SelectReminderPopup, Path=IsOpen}" Value="True"/>
                      <Condition Binding="{Binding ElementName=EmptyRemindText, Path=IsVisible}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                  </MultiDataTrigger>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding ElementName=SelectReminderBtn, Path=IsMouseOver}" Value="True"/>
                      <Condition Binding="{Binding ElementName=EmptyRemindText, Path=IsVisible}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <UIElement.RenderTransform>
              <RotateTransform Angle="-90"/>
            </UIElement.RenderTransform>
          </Path>
        </Border>
      </Grid>
    </Border>
    <misc:EscPopup x:Name="SelectReminderPopup" Closed="OnReminderPopupClosed" Opened="OnReminderPopupOpened"
                   PopupAnimation="Fade" StaysOpen="false" Placement="Bottom" Width="266" HorizontalOffset="-5"
                   VerticalOffset="-7" PlacementTarget="{Binding ElementName=SelectReminderBtn}"/>
    <misc:EscPopup x:Name="SelectRepeatPopup" Closed="OnRepeatPopupClosed" Opened="OnRepeatPopupOpened"
                   StaysOpen="false" Placement="Bottom" AllowsTransparency="true" PopupAnimation="Fade"
                   HorizontalOffset="-5" VerticalOffset="-7"
                   PlacementTarget="{Binding ElementName=SelectRepeatButton}"/>
    <Border MouseLeftButtonDown="OnShowPopupButtonMouseDown" MouseLeftButtonUp="SelectRepeatClick"
            Name="SelectRepeatButton" CornerRadius="4" Height="34" Cursor="Hand" Margin="4,0">
      <FrameworkElement.Style>
        <Style TargetType="{x:Type Border}">
          <Setter Property="Border.Background" Value="Transparent"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=SelectRepeatPopup, Path=IsOpen}" Value="True">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Root, Path=TabSelectedIndex}" Value="1">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </FrameworkElement.Style>
      <Grid Margin="6,0,4,0">
        <StackPanel IsHitTestVisible="false" Orientation="Horizontal" HorizontalAlignment="Left">
          <Path IsHitTestVisible="false" Margin="8,0" Stretch="Fill" Width="16" Height="16"
                Data="{Binding Source={StaticResource IcRepeat}, Path=Data}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}">
                <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity60}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ElementName=EmptyRepeatText, Path=IsVisible}" Value="False">
                    <Setter Property="Shape.Fill" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Path>
          <TextBlock Name="EmptyRepeatText" Text="{StaticResource Repeat}" Style="{DynamicResource Body12}"
                     FontSize="13" Foreground="{DynamicResource BaseColorOpacity80}"
                     Visibility="{Binding ElementName=RepeatText, Path=Text, Converter={StaticResource TextVisibleConverter}, ConverterParameter=1}"/>
          <TextBlock Name="RepeatText" HorizontalAlignment="Left" IsHitTestVisible="false" MaxWidth="190"
                     TextTrimming="WordEllipsis" FontSize="13" Style="{DynamicResource Body10}"
                     Foreground="{DynamicResource PrimaryColor}">
            <TextBlock.Text>
              <MultiBinding Converter="{StaticResource DefaultRepeatDisplayTextConverter}">
                <Binding Path="RepeatFrom"/>
                <Binding Path="RepeatFlag"/>
                <Binding Path="StartDate"/>
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>
        </StackPanel>
        <Border MouseLeftButtonUp="OnClearRepeatClick" HorizontalAlignment="Right" Width="26"
                Background="Transparent" Cursor="Hand"
                IsHitTestVisible="{Binding ElementName=EmptyRepeatText, Path=IsVisible, Converter={StaticResource BoolInverseConverter}}">
          <Path Name="RepeatRightPath" Fill="{DynamicResource BaseColorOpacity40}" Width="14" Height="14"
                HorizontalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}">
                <Setter Property="Path.Data" Value="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding ElementName=SelectRepeatPopup, Path=IsOpen}" Value="True"/>
                      <Condition Binding="{Binding ElementName=EmptyRepeatText, Path=IsVisible}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                  </MultiDataTrigger>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding ElementName=SelectRepeatButton, Path=IsMouseOver}" Value="True"/>
                      <Condition Binding="{Binding ElementName=EmptyRepeatText, Path=IsVisible}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <UIElement.RenderTransform>
              <RotateTransform Angle="-90"/>
            </UIElement.RenderTransform>
          </Path>
        </Border>
      </Grid>
    </Border>
    <Border Name="RepeatEndBt" CornerRadius="4" Margin="4,0">
      <FrameworkElement.Style>
        <Style TargetType="{x:Type Border}">
          <Setter Property="Border.Background" Value="Transparent"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=SetRepeatEndPopup, Path=IsOpen}" Value="True">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Root, Path=TabSelectedIndex}" Value="2">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </FrameworkElement.Style>
      <Grid MouseLeftButtonDown="OnShowPopupButtonMouseDown" MouseLeftButtonUp="SetRepeatEndClick"
            Name="RepeatEndGrid" Height="34" Margin="6,0,4,0" Background="Transparent" Cursor="Hand"
            Visibility="{Binding RepeatFlag, Converter={StaticResource RepeatVisibilityConverter}}">
        <UIElement.IsEnabled>
          <MultiBinding Converter="{StaticResource RepeatEndEnableConverter}">
            <Binding Path="RepeatFrom"/>
            <Binding Path="RepeatFlag"/>
          </MultiBinding>
        </UIElement.IsEnabled>
        <StackPanel HorizontalAlignment="Left" Orientation="Horizontal" IsHitTestVisible="false">
          <Path IsHitTestVisible="false" Margin="8,0" Stretch="Fill" Width="16" Height="16"
                Data="{Binding Source={StaticResource IcRepeatEnd}, Path=Data}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}">
                <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity60}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ElementName=EmptyRepeatEndText, Path=IsVisible}" Value="False">
                    <Setter Property="Shape.Fill" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Path>
          <TextBlock Name="EmptyRepeatEndText" TextTrimming="WordEllipsis" HorizontalAlignment="Left" Padding="0"
                     MaxWidth="190" FontSize="13" Text="{DynamicResource Endlessly}"
                     Foreground="{DynamicResource BaseColorOpacity80}"
                     Visibility="{Binding ElementName=RepeatEndText, Path=Text, Converter={StaticResource TextVisibleConverter}, ConverterParameter=1}"/>
          <TextBlock Name="RepeatEndText" TextTrimming="WordEllipsis" Foreground="{DynamicResource PrimaryColor}"
                     Padding="0" MaxWidth="190" FontSize="13" HorizontalAlignment="Left">
            <TextBlock.Text>
              <MultiBinding Converter="{StaticResource UntilDisplayTextConverter}">
                <Binding Path="RepeatFlag"/>
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>
        </StackPanel>
        <Grid Name="ClearPanel">
          <Grid MouseLeftButtonUp="OnClearRepeatEndClick" HorizontalAlignment="Right" Width="24"
                Background="Transparent" Cursor="Hand"
                IsHitTestVisible="{Binding ElementName=EmptyRepeatEndText, Path=IsVisible, Converter={StaticResource BoolInverseConverter}}">
            <Path Name="RepeatEndRightPath" Fill="{DynamicResource BaseColorOpacity40}" Width="14" Height="14"
                  HorizontalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type Path}">
                  <Setter Property="Path.Data" Value="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
                  <Style.Triggers>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=SetRepeatEndPopup, Path=IsOpen}" Value="True"/>
                        <Condition Binding="{Binding ElementName=EmptyRepeatEndText, Path=IsVisible}" Value="False"/>
                      </MultiDataTrigger.Conditions>
                      <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=RepeatEndBt, Path=IsMouseOver}" Value="True"/>
                        <Condition Binding="{Binding ElementName=EmptyRepeatEndText, Path=IsVisible}" Value="False"/>
                      </MultiDataTrigger.Conditions>
                      <Setter Property="Path.Data" Value="{Binding Source={StaticResource IcX}, Path=Data}"/>
                    </MultiDataTrigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Style>
              <UIElement.RenderTransform>
                <RotateTransform Angle="-90"/>
              </UIElement.RenderTransform>
            </Path>
          </Grid>
        </Grid>
      </Grid>
    </Border>
    <misc:EscPopup x:Name="SetRepeatEndPopup" Closed="OnRepeatEndPopupClosed" Opened="OnRepeatEndPopupOpened"
                   Placement="Bottom" HorizontalAlignment="Center" HorizontalOffset="-1" VerticalOffset="-7"
                   StaysOpen="false" PlacementTarget="{Binding ElementName=RepeatEndButton}">
      <time:SetRepeatEndControl x:Name="SetRepeatEndControl" Cancel="OnRepeatEndCancel" RepeatEndChange="OnRepeatEndChanged"/>
    </misc:EscPopup>
  </StackPanel>
</UserControl>