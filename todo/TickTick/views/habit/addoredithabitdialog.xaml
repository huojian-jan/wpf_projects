<Window x:Class="ticktick_WPF.Views.Habit.AddOrEditHabitDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:ticktick_WPF.Views.Habit"
        xmlns:wpf="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
        xmlns:misc="clr-namespace:ticktick_WPF.Views.Misc"
        xmlns:views="clr-namespace:ticktick_WPF.Views"
        xmlns:time="clr-namespace:ticktick_WPF.Views.Time"
        xmlns:markDown="clr-namespace:ticktick_WPF.Views.MarkDown"
        Loaded="OnWindowLoaded" PreviewMouseLeftButtonDown="OnPreviewMouseDown" Width="440"
        WindowStartupLocation="CenterOwner" Topmost="false" Style="{DynamicResource OkCancelWindowsStyle}">
  <UIElement.InputBindings>
    <KeyBinding Key="Escape" Command="{x:Static views:OkCancelWindowCommands.EscCommand}"
                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:IOkCancelWindow}}}"/>
    <KeyBinding Key="Enter" Command="{x:Static views:OkCancelWindowCommands.OkCommand}"
                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:IOkCancelWindow}}}"/>
  </UIElement.InputBindings>
  <FrameworkElement.Resources>
    <Storyboard x:Key="ToastShowAndHide" Completed="OnStoryCompleted">
      <DoubleAnimation Storyboard.TargetName="ToastGrid" Storyboard.TargetProperty="Opacity" From="0" To="1"
                       Duration="0:0:0.4"/>
      <DoubleAnimation Storyboard.TargetName="ToastGrid" Storyboard.TargetProperty="Opacity" From="1" To="0"
                       BeginTime="0:0:3" Duration="0:0:0.4"/>
    </Storyboard>
  </FrameworkElement.Resources>
  <Grid Margin="0,45,0,0">
    <Grid Margin="15,0">
      <Grid.RowDefinitions>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="auto"/>
        <RowDefinition Height="57"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MinWidth="72" Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Grid MouseLeftButtonUp="OnSelecteIconClick" Name="IconGrid" Height="36" Width="36"
            HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,24,0,0" Cursor="Hand">
        <Image Name="IconImage" Source="../../Assets/Habits/habit_daily_check_in.png"/>
        <Image Height="11" Width="11" HorizontalAlignment="Right" Source="{DynamicResource IconEditDrawingImage}"
               VerticalAlignment="Bottom" Stretch="Uniform"/>
      </Grid>
      <misc:EscPopup x:Name="SetIconPopup" Placement="Bottom" VerticalOffset="-2" Grid.Row="1" Grid.Column="0"
                     PopupAnimation="Fade" HorizontalOffset="-16" StaysOpen="false"
                     PlacementTarget="{Binding ElementName=IconGrid}">
        <local:SetHabitIconControl x:Name="SetIconControl" OnIconSaved="OnIconSelected" Closed="HideIconPopup"/>
      </misc:EscPopup>
      <TextBox TextChanged="OnTextChanged" Name="HabitTitleBox" Height="36" Margin="0,24,0,6"
               VerticalAlignment="Top" Grid.Row="0" Grid.Column="1" FontSize="14" MaxLength="64"
               Style="{DynamicResource HintEditTextStyle}" Tag="{StaticResource HabitDailyCheckIn}"/>
      <TextBlock Style="{DynamicResource Body03}" Grid.Row="1" Grid.Column="0" Text="{StaticResource Frequency}"
                 Margin="0,0,8,0"/>
      <Border MouseLeftButtonUp="OpenFrequencyPopup" Name="FrequencySelectBorder" Height="32" BorderThickness="1"
              Grid.Column="1" Grid.Row="1" Margin="0,6">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource HoverBorderStyle}">
            <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=SetFrequencyPopup, Path=IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <Grid>
          <TextBlock Name="FreqText" Style="{DynamicResource Body03}" Grid.Column="0" Margin="8,0,22,0"/>
          <Path Width="12" Height="12" Stretch="Fill" Margin="0,0,14,0" Fill="{DynamicResource BaseColorOpacity40}"
                HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
        </Grid>
      </Border>
      <misc:EscPopup x:Name="SetFrequencyPopup" Placement="Bottom" VerticalOffset="-5" Grid.Row="1" Grid.Column="0"
                     PopupAnimation="Fade" HorizontalOffset="-5" StaysOpen="false"
                     PlacementTarget="{Binding ElementName=FrequencySelectBorder}">
        <local:SetHabitFrequencyControl x:Name="SetFrequencyControl" OnFreqRuleSaved="OnFreqSaved" Closed="HideFreqPopup"/>
      </misc:EscPopup>
      <TextBlock Style="{DynamicResource Body03}" Grid.Row="2" Grid.Column="0" Text="{StaticResource Goal}"/>
      <Border MouseLeftButtonUp="OpenGoalPopup" Name="GoalBorder" Height="32" BorderThickness="1" Grid.Column="1"
              Grid.Row="2" Margin="0,6">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource HoverBorderStyle}">
            <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=SetGoalPopup, Path=IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <Grid>
          <TextBlock Name="GoalText" Style="{DynamicResource Body03}" Grid.Column="0" Margin="8,0,22,0"/>
          <Path Width="12" Height="12" Stretch="Fill" Margin="0,0,14,0" Fill="{DynamicResource BaseColorOpacity40}"
                HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
        </Grid>
      </Border>
      <misc:EscPopup x:Name="SetGoalPopup" Placement="Bottom" VerticalOffset="-5" Grid.Row="1" Grid.Column="0"
                     PopupAnimation="Fade" HorizontalOffset="-5" StaysOpen="false"
                     PlacementTarget="{Binding ElementName=GoalBorder}">
        <local:SetHabitGoalControl x:Name="SetGoalControl" OnGoalSaved="OnGoalSaved" Closed="HideGoalPopup"/>
      </misc:EscPopup>
      <StackPanel Grid.Row="4" Grid.Column="0" Margin="0,13,5,0" Orientation="Horizontal">
        <TextBlock Style="{DynamicResource Body03}" Text="{StaticResource DurationDays}" VerticalAlignment="Top"/>
        <Border Cursor="Hand" Background="Transparent" VerticalAlignment="Top" Margin="3,2,3,0"
                ToolTipService.InitialShowDelay="300">
          <FrameworkElement.ToolTip>
            <ToolTip Placement="Right" VerticalOffset="0">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type ToolTip}">
                  <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                  <Setter Property="ToolTip.HasDropShadow" Value="true"/>
                  <Setter Property="Control.Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ToolTip}">
                        <Border Background="{DynamicResource ToolTipBackColor}" CornerRadius="2">
                          <Border Name="BD" Background="{DynamicResource ToolTipTopColor}"
                                  Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                                  BorderThickness="0" CornerRadius="2">
                            <UIElement.Effect>
                              <DropShadowEffect Color="#000000" Opacity="0.12" BlurRadius="11" ShadowDepth="2" Direction="280"/>
                            </UIElement.Effect>
                            <Grid Margin="8,6,8,6">
                              <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                              </Grid.RowDefinitions>
                              <TextBlock Style="{DynamicResource Tag01}" Foreground="White" Text="{StaticResource WhatisGoalDays}"
                                         HorizontalAlignment="Left" MaxWidth="150" TextWrapping="Wrap"/>
                              <TextBlock Style="{DynamicResource Tag05}" Foreground="White" Opacity="0.8"
                                         Text="{StaticResource WhatisGoalDaysMessage}" Grid.Row="1" MaxWidth="200" Padding="0,2,0,0"
                                         TextWrapping="Wrap"/>
                            </Grid>
                          </Border>
                        </Border>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Style>
            </ToolTip>
          </FrameworkElement.ToolTip>
          <Path Width="14" Height="14" Fill="{DynamicResource BaseColorOpacity40}" Stretch="Uniform"
                Data="{Binding Source={StaticResource IcHelp}, Path=Data}"/>
        </Border>
      </StackPanel>
      <Border MouseLeftButtonUp="OpenTargetDayPopup" Name="TargetDayBorder" Height="32" BorderThickness="1"
              Grid.Row="4" Grid.Column="1" CornerRadius="4" Margin="0,6">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource HoverBorderStyle}">
            <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=TargetDaySelectPopup, Path=IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <Grid>
          <TextBlock Name="TargetDayTextBlock" Style="{DynamicResource Body03}" Grid.Column="0" Margin="8,0,22,0">一天</TextBlock>
          <Path Width="12" Height="12" Stretch="Fill" Margin="0,0,14,0" Fill="{DynamicResource BaseColorOpacity40}"
                HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
        </Grid>
      </Border>
      <misc:EscPopup x:Name="TargetDaySelectPopup" Placement="Bottom" HorizontalOffset="-5" StaysOpen="true"
                     PlacementTarget="{Binding ElementName=TargetDayBorder}">
        <ContentControl Style="{DynamicResource PopupContentStyle}">
          <StackPanel x:Name="TargetDayList" Orientation="Vertical" Width="182">
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="0" Selected="true" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="7" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="21" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="30" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="100" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox MouseLeftButtonUp="OnTargetDaySelectClick" Tag="365" Text="{StaticResource Forever}"/>
            <misc:OptionCheckBox x:Name="TargetDayCustomRadioButton" MouseLeftButtonUp="OnTargetDaySelectClick" Tag="-1"
                                 Text="{StaticResource Custom}"/>
          </StackPanel>
        </ContentControl>
      </misc:EscPopup>
      <misc:EscPopup x:Name="TargetDayCustomPopup" HorizontalOffset="-6" VerticalOffset="2" Placement="Bottom"
                     StaysOpen="true" PlacementTarget="{Binding ElementName=TargetDayList}">
        <ContentControl Style="{DynamicResource PopupContentStyle}"
                        Visibility="{Binding ElementName=TargetDayCustomInput, Path=Visibility}">
          <Grid Width="182">
            <Grid.RowDefinitions>
              <RowDefinition Height="42"/>
              <RowDefinition Height="42"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="126"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBox TextChanged="OnTargetDayCustomInputTextChanged"
                     PreviewTextInput="OnTargetDayCustomInputPreviewTextInput" PreviewKeyUp="OnCustomTargetKeyUp"
                     x:Name="TargetDayCustomInput" Style="{StaticResource HintEditTextStyle}" Height="27"
                     Margin="12, 0, 0, 0"/>
            <TextBlock Name="TargetDayCustomInputDay" Grid.Column="1" Margin="19, 0, 0, 0" VerticalAlignment="Center"
                       Style="{StaticResource Body03}" Text="{StaticResource PublicDay}"/>
            <Grid Row="1" ColumnSpan="2">
              <Button Click="OnTargetDaySelectCustomOk" Width="75" HorizontalAlignment="Left" Margin="12, 0, 0 ,0"
                      Style="{StaticResource SaveButtonStyle}" Content="{StaticResource OK}"/>
              <Button Click="OnPopupCancelClick" Width="75" HorizontalAlignment="Right" Margin="0, 0, 12, 0"
                      Style="{StaticResource CancelButtonStyle}" Content="{StaticResource Cancel}"/>
            </Grid>
          </Grid>
        </ContentControl>
      </misc:EscPopup>
      <TextBlock Grid.Row="3" Grid.Column="0" Text="{StaticResource StartDate}" VerticalAlignment="Top"
                 Margin="0,13,5,0" Style="{DynamicResource Body03}"/>
      <Border MouseLeftButtonUp="OpenTargetStartDatePopup" Name="TargetStartDateBorder" Height="32"
              BorderThickness="1" Grid.Row="3" Grid.Column="1" CornerRadius="4" Margin="0,6">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource HoverBorderStyle}">
            <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=TargetStartDatePopup, Path=IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <Grid>
          <TextBlock Name="TargetStartDateTextBlock" Style="{DynamicResource Body03}" Grid.Column="0" Margin="8,0,22,0"/>
          <Path Width="12" Height="12" Stretch="Fill" Margin="0,0,14,0" Fill="{DynamicResource BaseColorOpacity40}"
                HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
        </Grid>
      </Border>
      <misc:EscPopup x:Name="TargetStartDatePopup" Placement="Bottom" HorizontalOffset="-5" VerticalOffset="-5"
                     StaysOpen="false" PlacementTarget="{Binding ElementName=TargetStartDateBorder}">
        <ContentControl Style="{DynamicResource PopupContentStyle}" Margin="0,6,0,12">
          <Grid Width="244">
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <time:TickDatePicker x:Name="TargetStartDatePicker" Width="225" Background="Transparent"/>
            <Grid Row="1" ColumnSpan="2">
              <Button Click="OnTargetStartDateOk" Width="106" HorizontalAlignment="Left" Margin="12, 0, 0 ,0"
                      Style="{StaticResource SaveButtonStyle}" Content="{StaticResource OK}"/>
              <Button Click="OnPopupCancelClick" Width="106" HorizontalAlignment="Right" Margin="0, 0, 12, 0"
                      Style="{StaticResource CancelButtonStyle}" Content="{StaticResource Cancel}"/>
            </Grid>
          </Grid>
        </ContentControl>
      </misc:EscPopup>
      <TextBlock Grid.Row="5" Grid.Column="0" Text="{StaticResource HabitSection}" VerticalAlignment="Top"
                 Margin="0,13,5,0" Style="{DynamicResource Body03}"/>
      <Border MouseLeftButtonUp="OpenSectionPopup" Name="SectionBorder" Height="32" BorderThickness="1"
              Grid.Row="5" Grid.Column="1" CornerRadius="4" Margin="0,6">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource HoverBorderStyle}">
            <Setter Property="Border.BorderBrush" Value="{DynamicResource BaseColorOpacity20}"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=SectionPopup, Path=IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <Grid>
          <wpf:EmjTextBlock x:Name="SectionNameTextBlock" FontSize="13" HorizontalAlignment="Left" MaxWidth="275"
                            TextTrimming="CharacterEllipsis" VerticalAlignment="Center"
                            Foreground="{DynamicResource BaseColorOpacity100}" Grid.Column="0" Margin="8,0,22,0"/>
          <Path Width="12" Height="12" Stretch="Fill" Margin="0,0,14,0" Fill="{DynamicResource BaseColorOpacity40}"
                HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                Data="{Binding Source={StaticResource ArrowLine}, Path=Data}"/>
        </Grid>
      </Border>
      <misc:EscPopup x:Name="SectionPopup" Placement="Bottom" HorizontalOffset="-5" VerticalOffset="-5" StaysOpen="true"
                     PlacementTarget="{Binding ElementName=SectionBorder}">
        <ContentControl Style="{DynamicResource PopupContentStyle}" Padding="0">
          <ListView Name="SectionList" Width="185" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    Style="{StaticResource ListViewStyle}">
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <misc:OptionCheckBox MouseLeftButtonUp="OnSelectSectionClick" Width="185" Text="{Binding Title}"
                                     Selected="{Binding Selected}"/>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemContainerStyle>
              <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                      <ContentPresenter/>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ItemsControl.ItemContainerStyle>
          </ListView>
        </ContentControl>
      </misc:EscPopup>
      <misc:EscPopup x:Name="AddSectionPopup" Placement="Bottom" StaysOpen="true" HorizontalOffset="-5"
                     PlacementTarget="{Binding ElementName=SectionList}">
        <ContentControl Style="{DynamicResource PopupContentStyle}" Margin="4,8">
          <Grid Width="177">
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <markDown:EmojiEditor x:Name="AddSectionInput" TextChanged="OnAddSectionInputTextChanged" Margin="12,4" Padding="6,0"
                                  WordWrap="false" Foreground="{DynamicResource BaseColorOpacity100_80}" BorderThickness="1"
                                  BorderCorner="4" BorderBackground="{DynamicResource TextBoxBackground}" Height="27"
                                  Tag="{StaticResource HabitSectionNewTip}" MaxLength="64"/>
            <TextBlock Name="AddSectionError" Style="{DynamicResource Tag06}" Foreground="Red" Margin="12,3,0,0"
                       Grid.Row="1" Visibility="Collapsed"/>
            <Button Click="OnAddSectionOkClicked" Style="{DynamicResource SaveButtonStyle}" Grid.Row="2" Width="72"
                    Margin="12,8,12,4" HorizontalAlignment="Left" Content="{StaticResource OK}"/>
            <Button Click="OnPopupCancelClick" Style="{DynamicResource CancelButtonStyle}" Grid.Row="2" Width="72"
                    HorizontalAlignment="Right" Margin="12,8,12,4" Content="{StaticResource Cancel}"/>
          </Grid>
        </ContentControl>
      </misc:EscPopup>
      <TextBlock Style="{DynamicResource Body03}" Grid.Row="6" Grid.Column="0" Text="{StaticResource reminder}"
                 VerticalAlignment="Top" Margin="0,15,0,0"/>
      <local:SetHabitReminderControl x:Name="SetReminderControl" Toast="Toast" Grid.Row="6" Grid.Column="1" HorizontalAlignment="Left"
                                     Margin="0,4,0,0"/>
      <Grid VerticalAlignment="Top" Margin="0,10,0,0" Row="7" ColumnSpan="2"
            Background="{DynamicResource BaseColorOpacity5}" Height="1"/>
      <CheckBox Name="RecordCheckBox" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="0, 20, 0, 5"
                IsTabStop="false" FontSize="13" Style="{DynamicResource SimpleCheckBoxStyle}"
                HorizontalAlignment="Left"/>
      <TextBlock Margin="20,21,0,5" Text="{StaticResource RecordAfterCheck}" Style="{StaticResource Body03}"
                 Padding="2" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2"/>
      <Grid Row="8" VerticalAlignment="Bottom" Height="56" Column="1">
        <Button Click="OnCancelClick" Content="{DynamicResource Cancel}" HorizontalAlignment="Right"
                Style="{StaticResource CancelButtonStyle}" Width="120"/>
        <Button Click="OnSaveClick" Name="SaveButton" Content="{DynamicResource PublicSave}"
                HorizontalAlignment="Right" Style="{StaticResource SaveButtonStyle}" Margin="0,0,134,0" Width="120"/>
      </Grid>
    </Grid>
    <Grid Name="ToastGrid" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,30,70"
          Visibility="Collapsed">
      <Border Background="{DynamicResource ToastBackground}" CornerRadius="4"/>
      <TextBlock Name="ToastTextBlock" Foreground="White" Margin="10,15"/>
    </Grid>
  </Grid>
</Window>