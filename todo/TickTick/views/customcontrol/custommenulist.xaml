<UserControl x:Class="ticktick_WPF.Views.CustomControl.CustomMenuList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:ticktick_WPF.Views.Calendar"
             xmlns:misc="clr-namespace:ticktick_WPF.Views.Misc"
             xmlns:resource="clr-namespace:ticktick_WPF.Resource"
             xmlns:customControl="clr-namespace:ticktick_WPF.Views.CustomControl"
             xmlns:wpf="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
             FontFamily="{Binding Source={x:Static resource:LocalSettings.Settings}, Path=FontFamily}">
  <FrameworkElement.Resources>
    <customControl:MenuItemTemplateSelector x:Key="TemplateSelector"/>
    <DataTemplate x:Key="SplitLineItem" DataType="customControl:CustomMenuItemViewModel">
      <Line Style="{DynamicResource SplitLineStyle}" Margin="0,4"/>
    </DataTemplate>
    <Style x:Key="ItemBorderStyle" TargetType="{x:Type Border}">
      <Setter Property="Border.Background" Value="Transparent"/>
      <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
      <Setter Property="UIElement.Opacity" Value="1"/>
      <Setter Property="FrameworkElement.Margin" Value="4,0"/>
      <Setter Property="Border.CornerRadius" Value="4"/>
      <Style.Triggers>
        <DataTrigger Binding="{Binding Path=HoverSelected}" Value="True">
          <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity3}"/>
        </DataTrigger>
        <Trigger Property="UIElement.IsEnabled" Value="false">
          <Setter Property="UIElement.Opacity" Value="0.6"/>
          <Setter Property="FrameworkElement.Cursor" Value="Arrow"/>
          <Setter Property="FrameworkElement.Margin" Value="0"/>
          <Setter Property="Border.CornerRadius" Value="0"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    <DataTemplate x:Key="ImageItem" DataType="customControl:CustomMenuItemViewModel">
      <Border Height="{DynamicResource Height36}" Style="{DynamicResource ItemBorderStyle}"
              MinWidth="{Binding MinWidth}" IsEnabled="{Binding IsEnable}">
        <DockPanel Margin="0,0,4,0">
          <Image DockPanel.Dock="Left" Style="{StaticResource Icon01}" Margin="{Binding Path=ImageMargin}"
                 Source="{Binding Path=Image}" Height="{Binding Path=ImageWidth}" Width="{Binding Path=ImageWidth}"/>
          <Path DockPanel.Dock="Right" IsHitTestVisible="false" HorizontalAlignment="Right" Width="12" Height="12"
                Style="{DynamicResource Path01}" Fill="{DynamicResource PrimaryColor}"
                Data="{Binding Source={StaticResource IcCheck}, Path=Data}"
                Visibility="{Binding Path=Selected, Converter={StaticResource BoolVisibleConverter}}"/>
          <Polygon Width="12" Height="12" IsHitTestVisible="false" DockPanel.Dock="Right"
                   RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center"
                   Fill="{DynamicResource BaseColorOpacity40}"
                   Visibility="{Binding SubActions, Converter={StaticResource NullToVisibilityConverter}}">
            <Polygon.Points>
              <Binding Source="{StaticResource ArrowPolygon}" Path="Points"/>
            </Polygon.Points>
            <UIElement.RenderTransform>
              <RotateTransform Angle="270"/>
            </UIElement.RenderTransform>
          </Polygon>
          <Path DockPanel.Dock="Right" Stretch="Uniform" RenderTransformOrigin="0.5,0.5"
                Fill="{Binding ExtraIconColor}" Height="{Binding ExtraIconSize}" Width="{Binding ExtraIconSize}"
                Data="{Binding ExtraIcon}"
                Visibility="{Binding ExtraIcon, Converter={StaticResource NullToVisibilityConverter}}">
            <UIElement.RenderTransform>
              <RotateTransform Angle="{Binding ExtraIconAngle}"/>
            </UIElement.RenderTransform>
          </Path>
          <TextBlock Foreground="{DynamicResource BaseColorOpacity60}" DockPanel.Dock="Right" IsHitTestVisible="false"
                     VerticalAlignment="Center" FontSize="{Binding Path=FontSize}"
                     Visibility="{Binding RightText, Converter={StaticResource StringToVisibleConverter}}"
                     Text="{Binding RightText}" Margin="{Binding TextMargin}"/>
          <wpf:EmjTextBlock TextTrimming="CharacterEllipsis" DockPanel.Dock="Left" Margin="8,1,8,0" IsHitTestVisible="false"
                            VerticalAlignment="Center" Text="{Binding Path=Text}" FontSize="{Binding Path=FontSize}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type wpf:EmjTextBlock}">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Path=Selected}" Value="True">
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </wpf:EmjTextBlock>
        </DockPanel>
      </Border>
    </DataTemplate>
    <DataTemplate x:Key="IconItem" DataType="customControl:CustomMenuItemViewModel">
      <Border Height="{DynamicResource Height36}" Style="{DynamicResource ItemBorderStyle}"
              IsEnabled="{Binding IsEnable}">
        <DockPanel Margin="0,0,4,0">
          <Path DockPanel.Dock="Left" HorizontalAlignment="Left" Width="16" Height="16" VerticalAlignment="Center"
                IsHitTestVisible="false" Margin="{Binding Path=ImageMargin}"
                Visibility="{Binding Path=Icon, Converter={StaticResource NullToVisibilityConverter}}"
                Data="{Binding Path=Icon}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Path}" BasedOn="{StaticResource Path01}">
                <Setter Property="Shape.Fill" Value="{DynamicResource BaseColorOpacity60}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Path=Selected}" Value="True">
                    <Setter Property="Shape.Fill" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </Path>
          <Path DockPanel.Dock="Right" IsHitTestVisible="false" HorizontalAlignment="Right" Width="12" Height="12"
                Style="{DynamicResource Path01}" Fill="{DynamicResource PrimaryColor}"
                Data="{Binding Source={StaticResource IcCheck}, Path=Data}"
                Visibility="{Binding Path=Selected, Converter={StaticResource BoolVisibleConverter}}"/>
          <Polygon Width="12" Height="12" IsHitTestVisible="false" DockPanel.Dock="Right"
                   RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center"
                   Fill="{DynamicResource BaseColorOpacity40}"
                   Visibility="{Binding HasChildren, Converter={StaticResource BoolVisibleConverter}}">
            <Polygon.Points>
              <Binding Source="{StaticResource ArrowPolygon}" Path="Points"/>
            </Polygon.Points>
            <UIElement.RenderTransform>
              <RotateTransform Angle="270"/>
            </UIElement.RenderTransform>
          </Polygon>
          <Path DockPanel.Dock="Right" Stretch="Uniform" RenderTransformOrigin="0.5,0.5"
                Fill="{Binding ExtraIconColor}" Height="{Binding ExtraIconSize}" Width="{Binding ExtraIconSize}"
                Data="{Binding ExtraIcon}"
                Visibility="{Binding ExtraIcon, Converter={StaticResource NullToVisibilityConverter}}">
            <UIElement.RenderTransform>
              <RotateTransform Angle="{Binding ExtraIconAngle}"/>
            </UIElement.RenderTransform>
          </Path>
          <TextBlock Foreground="{DynamicResource BaseColorOpacity60}" DockPanel.Dock="Right" IsHitTestVisible="false"
                     VerticalAlignment="Center" FontSize="{Binding Path=Text}"
                     Visibility="{Binding RightText, Converter={StaticResource StringToVisibleConverter}}"
                     Text="{Binding RightText}" Margin="{Binding TextMargin}"/>
          <wpf:EmjTextBlock TextTrimming="CharacterEllipsis" DockPanel.Dock="Left" Margin="8,0,8,0" IsHitTestVisible="false"
                            VerticalAlignment="Center" Text="{Binding Path=Text}" FontSize="{Binding Path=FontSize}">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type wpf:EmjTextBlock}">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource BaseColorOpacity100_80}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Path=Selected}" Value="True">
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource PrimaryColor}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </wpf:EmjTextBlock>
        </DockPanel>
      </Border>
    </DataTemplate>
    <DataTemplate x:Key="MessageItem" DataType="customControl:CustomMenuItemViewModel">
      <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="{DynamicResource Height36}"
                  Orientation="Horizontal" Margin="0,0,0,0" Background="Transparent">
        <TextBlock Foreground="{DynamicResource BaseColorOpacity60}" FontSize="{DynamicResource Font13}"
                   VerticalAlignment="Center" Margin="12,0,0,0" Text="{Binding Text}"/>
        <Border Cursor="Hand" Style="{DynamicResource SmoothHoverBorderStyle40_60}" Margin="4,0,0,0"
                ToolTipService.InitialShowDelay="100" VerticalAlignment="Center" ToolTip="{Binding ExtraIconTips}">
          <Path Stretch="Uniform" Fill="{Binding ExtraIconColor}" Height="{Binding ExtraIconSize}"
                Width="{Binding ExtraIconSize}" Data="{Binding ExtraIcon}"
                Visibility="{Binding ExtraIcon, Converter={StaticResource NullToVisibilityConverter}}"/>
        </Border>
      </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="TextCenterItem" DataType="customControl:CustomMenuItemViewModel">
      <Border CornerRadius="0" Height="{DynamicResource Height24}" Cursor="Hand">
        <FrameworkElement.Style>
          <Style TargetType="{x:Type Border}">
            <Setter Property="Border.Background" Value="Transparent"/>
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=HoverSelected}" Value="True">
                <Setter Property="Border.Background" Value="{DynamicResource BaseColorOpacity5}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </FrameworkElement.Style>
        <TextBlock TextAlignment="Center" Foreground="{DynamicResource BaseColorOpacity40}"
                   FontSize="{DynamicResource Font13}" VerticalAlignment="Center" Text="{Binding Text}"/>
      </Border>
    </DataTemplate>
  </FrameworkElement.Resources>
  <ContentControl Name="Container" Style="{DynamicResource PopupContentStyle}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ContentControl Name="TopItem"/>
      <customControl:UpDownSelectListView x:Name="Items" ItemSelected="OnItemSelect" LeftRightKeyDown="OnLeftRightKeyDown" Grid.Row="1"
                                          ItemTemplateSelector="{StaticResource TemplateSelector}"/>
      <misc:EscPopup x:Name="SubPopup" Closed="SubpopupClosed" Grid.Row="1" HorizontalOffset="-3" VerticalOffset="-12"/>
    </Grid>
  </ContentControl>
</UserControl>